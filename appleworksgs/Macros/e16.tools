; File:  AIIGSRecords.aii ;;; Copyright Apple computer, Inc.  1986-89 ; All Rights Reserved ;;Str255 RECORD 0 ; Typeslength  DS.B 1 ; Byte -  text  DS.B 255 ; char[255] -    ENDRStr32 RECORD 0 ; Typeslength  DS.B 1 ; Byte -  text  DS.B 32 ; char[32] -    ENDRPoint RECORD 0 ; Typesv  DS.B 2 ; Integer -  h  DS.B 2 ; Integer -    ENDRRect RECORD 0 ; Typesv1  DS.B 2 ; Integer -  h1  DS.B 2 ; Integer -  v2  DS.B 2 ; Integer -  h2  DS.B 2 ; Integer -    ENDRTimeRec RECORD 0 ; Typessecond  DS.B 1 ; Byte -  minute  DS.B 1 ; Byte -  hour  DS.B 1 ; Byte -  year  DS.B 1 ; Byte -  day  DS.B 1 ; Byte -  month  DS.B 1 ; Byte -  extra  DS.B 1 ; Byte -  weekDay  DS.B 1 ; Byte -    ENDRCursor RECORD 0 ; QuickdrawcursorHeight  DS.B 2 ; Word - size in bytescursorWidth  DS.B 2 ; Word - enclosing rectanglecursorData  DS.B 2 ; Word[1] -  cursorMask  DS.B 2 ; Word[1] -  cursorHotSpot  DS Point ; Point -    ENDRRegion RECORD 0 ; QuickdrawrgnSize  DS.B 2 ; word - size in bytesrgnBBox  DS Rect ; Rect - enclosing rectangle  ENDRBufDimRec RECORD 0 ; QuickdrawmaxWidth  DS.B 2 ; Word - textBufHeight  DS.B 2 ; Word - textBufferWords  DS.B 2 ; Word - fontWidth  DS.B 2 ; Word -   ENDRFont RECORD 0 ; QuickdrawoffseToMF  DS.B 2 ; Word - fully defined front of the Font record.family  DS.B 2 ; Word - style  DS.B 2 ; TextStyle - size  DS.B 2 ; Word - version  DS.B 2 ; Word - fbrExtent  DS.B 2 ; Word -   ENDRFontGlobalsRecord RECORD 0 ; QuickdrawfgFontID  DS.B 2 ; Word - currently 12 bytes long, but may be expandedfgStyle  DS.B 2 ; TextStyle - fgSize  DS.B 2 ; Word - fgVersion  DS.B 2 ; Word - fgWidMax  DS.B 2 ; Word - fgFBRExtent  DS.B 2 ; Word -   ENDRFontID RECORD 0 ; QuickdrawfamNum  DS.B 2 ; Word - fontStyle  DS.B 1 ; Byte - fontSize  DS.B 1 ; Byte -   ENDRFontInfoRecord RECORD 0 ; Quickdrawascent  DS.B 2 ; integer - descent  DS.B 2 ; integer - widMax  DS.B 2 ; integer - leading  DS.B 2 ; integer -   ENDRLocInfo RECORD 0 ; QuickdrawportSCB  DS.B 2 ; Word - SCBByte in low byteptrToPixImage  DS.B 4 ; Pointer - ImageRefwidth  DS.B 2 ; Word - WidthboundsRect  DS Rect ; Rect - BoundsRect  ENDRQDProcs RECORD 0 ; QuickdrawstdText  DS.B 4 ; VoidProcPtr - stdLine  DS.B 4 ; VoidProcPtr - stdRect  DS.B 4 ; VoidProcPtr - stdRRect  DS.B 4 ; VoidProcPtr - stdOval  DS.B 4 ; VoidProcPtr - stdArc  DS.B 4 ; VoidProcPtr - stdPoly  DS.B 4 ; VoidProcPtr - stdRgn  DS.B 4 ; VoidProcPtr - stdPixels  DS.B 4 ; VoidProcPtr - stdComment  DS.B 4 ; VoidProcPtr - stdTxMeas  DS.B 4 ; VoidProcPtr - stdTxBnds  DS.B 4 ; VoidProcPtr - stdGetPic  DS.B 4 ; VoidProcPtr - stdPutPic  DS.B 4 ; VoidProcPtr -   ENDRGrafPort RECORD 0 ; QuickdrawportInfo  DS LocInfo ; LocInfo - portRect  DS Rect ; Rect - PortRectclipRgn  DS.B 4 ; RgnHandle - Clip Rgn. PointervisRgn  DS.B 4 ; RgnHandle - Vis. Rgn. PointerbkPat  DS.B 32 ; Pattern - BackGround PatternpnLoc  DS Point ; Point - Pen LocationpnSize  DS Point ; Point - Pen SizepnMode  DS.B 2 ; Word - Pen ModepnPat  DS.B 32 ; Pattern - Pen PatternpnMask  DS.B 8 ; Mask - Pen MaskpnVis  DS.B 2 ; Word - Pen VisablefontHandle  DS.B 4 ; FontHndl - fontID  DS FontID ; FontID - Font IDfontFlags  DS.B 2 ; Word - FontFlagstxSize  DS.B 2 ; Integer - Text SizetxFace  DS.B 2 ; TextStyle - Text FacetxMode  DS.B 2 ; Word - Text ModespExtra  DS.B 4 ; Fixed - Fixed Point ValuechExtra  DS.B 4 ; Fixed - Fixed Point ValuefgColor  DS.B 2 ; Word - ForeGround ColorbgColor  DS.B 2 ; Word - BackGround ColorpicSave  DS.B 4 ; Handle - PicSavergnSave  DS.B 4 ; Handle - RgnSavepolySave  DS.B 4 ; Handle - PolySavegrafProcs  DS.B 4 ; QDProcsPtr - arcRot  DS.B 2 ; Integer - ArcRotuserField  DS.B 4 ; Longint - UserFieldsysField  DS.B 4 ; Longint - SysField  ENDRPaintParam RECORD 0 ; QuickdrawptrToSourceLocInfo  DS.B 4 ; LocInfoPtr - ptrToDestLocInfo  DS.B 4 ; LocInfoPtr - ptrToSourceRect  DS.B 4 ; RectPtr - ptrToDestPoint  DS.B 4 ; PointPtr - mode  DS.B 2 ; Word - maskHandle  DS.B 4 ; Handle - clip region  ENDRPenState RECORD 0 ; QuickdrawpsPnSize  DS Point ; Point - psPnMode  DS.B 2 ; Word - psPnPat  DS.B 32 ; Pattern - psPnMask  DS.B 8 ; Mask -   ENDRRomFontRec RECORD 0 ; QuickdrawrfFamNum  DS.B 2 ; Word - rfFamStyle  DS.B 2 ; Word - rfSize  DS.B 2 ; Word - rfFontHandle  DS.B 4 ; FontHndl - rfNamePtr  DS.B 4 ; Pointer - rfFBRExtent  DS.B 2 ; Word -   ENDRColorTable RECORD 0 ; Quickdrawentries  DS.B 32 ; Word[16] -    ENDRClampRec RECORD 0 ; MiscToolyMaxClamp  DS.B 2 ; Word - yMinClamp  DS.B 2 ; Word - xMaxClamp  DS.B 2 ; Word - xMinClamp  DS.B 2 ; Word -   ENDRFWRec RECORD 0 ; MiscToolyRegExit  DS.B 2 ; Word - xRegExit  DS.B 2 ; Word - aRegExit  DS.B 2 ; Word - status  DS.B 2 ; Word -   ENDRMouseRec RECORD 0 ; MiscToolmouseMode  DS.B 1 ; Byte - mouseStatus  DS.B 1 ; Byte - yPos  DS.B 2 ; Word - xPos  DS.B 2 ; Word -   ENDRInterruptStateRec RECORD 0 ; MiscToolirq_A  DS.B 2 ; Word -  irq_X  DS.B 2 ; Word -  irq_Y  DS.B 2 ; Word -  irq_S  DS.B 2 ; Word -  irq_D  DS.B 2 ; Word -  irq_P  DS.B 1 ; Byte -  irq_DB  DS.B 1 ; Byte -  irq_e  DS.B 1 ; Byte -  irq_K  DS.B 1 ; Byte -  irq_PC  DS.B 2 ; Word -  irq_state  DS.B 1 ; Byte -  irq_shadow  DS.B 2 ; Word -  irq_mslot  DS.B 1 ; Byte -    ENDREventRecord RECORD 0 ; Eventwhat  DS.B 2 ; Word - event codemessage  DS.B 4 ; Long - event messagewhen  DS.B 4 ; Long - ticks since startupwhere  DS Point ; Point - mouse locationmodifiers  DS.B 2 ; Word - modifier flagswmTaskData  DS.B 4 ; Long - wmTaskMask  DS.B 4 ; Long - wmLastClickTick  DS.B 4 ; Long - wmClickCount  DS.B 2 ; Word - wmTaskData2  DS.B 4 ; Long - wmTaskData3  DS.B 4 ; Long -  wmTaskData4  DS.B 4 ; Long -  wmLastClickPt  DS Point ; Point -    ENDRBarColors RECORD 0 ; ControlbarOutline  DS.B 2 ; Word - color for outlining bar, arrows, and thumbbarNorArrow  DS.B 2 ; Word - color of arrows when not highlightedbarSelArrow  DS.B 2 ; Word - color of arrows when highlightedbarArrowBack  DS.B 2 ; Word - color of arrow box's backgroundbarNorThumb  DS.B 2 ; Word - color of thumb's background when not highlightedbarSelThumb  DS.B 2 ; Word - color of thumb's background when highlightedbarPageRgn  DS.B 2 ; Word - color and pattern page region: high byte - 1= dither, 0 = solidbarInactive  DS.B 2 ; Word - color of scroll bar's interior when inactive  ENDRBoxColors RECORD 0 ; ControlboxReserved  DS.B 2 ; Word - reservedboxNor  DS.B 2 ; Word - color of box when not checkedboxSel  DS.B 2 ; Word - color of box when checkedboxTitle  DS.B 2 ; Word - color of check box's title  ENDRBttnColors RECORD 0 ; ControlbttnOutline  DS.B 2 ; Word - color of outlinebttnNorBack  DS.B 2 ; Word - color of background when not selectedbttnSelBack  DS.B 2 ; Word - color of background when selectedbttnNorText  DS.B 2 ; Word - color of title's text when not selectedbttnSelText  DS.B 2 ; Word - color of title's text when selected  ENDRCtlRec RECORD 0 ; ControlctlNext  DS.B 4 ; CtlRecHndl - Handle of next control.ctlOwner  DS.B 4 ; WindowPtr - Pointer to control's window.ctlRect  DS Rect ; Rect - Enclosing rectangle.ctlFlag  DS.B 1 ; Byte - Bit flags.ctlHilite  DS.B 1 ; Byte - Highlighted part.ctlValue  DS.B 2 ; Integer - Control's value.ctlProc  DS.B 4 ; LongProcPtr - Control's definition procedure.ctlAction  DS.B 4 ; LongProcPtr - Control's action procedure.ctlData  DS.B 4 ; Longint - Reserved for CtrlProc's use.ctlRefCon  DS.B 4 ; Longint - Reserved for application's use.ctlColor  DS.B 4 ; Pointer - Pointer to appropriate color table.ctlReserved  DS.B 16 ; Byte[16] - Reserved for future expansionctlID  DS.B 4 ; Long - ctlMoreFlags  DS.B 2 ; Word - ctlVersion  DS.B 2 ; Word -   ENDRLimitBlk RECORD 0 ; ControlboundRect  DS Rect ; Rect - Drag bounds.slopRect  DS Rect ; Rect - Cursor bounds.axisParam  DS.B 2 ; Word - Movement constrains.dragPatt  DS.B 4 ; Pointer - Pointer to 32 byte Pattern for drag outline.  ENDRRadioColors RECORD 0 ; ControlradReserved  DS.B 2 ; Word - reservedradNor  DS.B 2 ; Word - color of radio button when offradSel  DS.B 2 ; Word - color of radio button when onradTitle  DS.B 2 ; Word - color of radio button's title text  ENDRWindColor RECORD 0 ; WindowframeColor  DS.B 2 ; Word - Color of window frame.titleColor  DS.B 2 ; Word - Color of title and bar.tBarColor  DS.B 2 ; Word - Color/pattern of title bar.growColor  DS.B 2 ; Word - Color of grow box.infoColor  DS.B 2 ; Word - Color of information bar.  ENDRWindRec RECORD 0 ; Windowport  DS GrafPort ; GrafPort - Window's portwDefProc  DS.B 4 ; ProcPtr - wRefCon  DS.B 4 ; Long - wContDraw  DS.B 4 ; ProcPtr - wReserved  DS.B 4 ; Long - Space for future expansionwStrucRgn  DS.B 4 ; RgnHandle - Region of frame plus content.wContRgn  DS.B 4 ; RgnHandle - Content region.wUpdateRgn  DS.B 4 ; RgnHandle - Update region.wControls  DS.B 4 ; CtlRecHndl - Window's control list.wFrameCtrls  DS.B 4 ; CtlRecHndl - Window frame's control list.wFrame  DS.B 2 ; Word -    ENDRWindowChain RECORD 0 ; WindowwNext  DS.B 4 ; WindowChainPtr -  theWindow  DS WindRec ; WindRec -    ENDRParamList RECORD 0 ; WindowparamLength  DS.B 2 ; Word - Parameter to NewWindow. wFrameBits  DS.B 2 ; Word - Parameter to NewWindow.wTitle  DS.B 4 ; Pointer - Parameter to NewWindow.wRefCon  DS.B 4 ; Long - Parameter to NewWindow.wZoom  DS Rect ; Rect - Parameter to NewWindow.wColor  DS.B 4 ; WindColorPtr - Parameter to NewWindow.wYOrigin  DS.B 2 ; Word - Parameter to NewWindow.wXOrigin  DS.B 2 ; Word - Parameter to NewWindow.wDataH  DS.B 2 ; Word - Parameter to NewWindow.wDataW  DS.B 2 ; Word - Parameter to NewWindow.wMaxH  DS.B 2 ; Word - Parameter to NewWindow.wMaxW  DS.B 2 ; Word - Parameter to NewWindow.wScrollVer  DS.B 2 ; Word - Parameter to NewWindow.wScrollHor  DS.B 2 ; Word - Parameter to NewWindow.wPageVer  DS.B 2 ; Word - Parameter to NewWindow.wPageHor  DS.B 2 ; Word - Parameter to NewWindow.wInfoRefCon  DS.B 4 ; Long - Parameter to NewWindow.wInfoHeight  DS.B 2 ; Word - height of information barwFrameDefProc  DS.B 4 ; LongProcPtr - Parameter to NewWindow.wInfoDefProc  DS.B 4 ; VoidProcPtr - Parameter to NewWindow.wContDefProc  DS.B 4 ; VoidProcPtr - Parameter to NewWindow.wPosition  DS Rect ; Rect - Parameter to NewWindow.wPlane  DS.B 4 ; WindowPtr - Parameter to NewWindow.wStorage  DS.B 4 ; WindowChainPtr - Parameter to NewWindow.  ENDRDeskMessageRecord RECORD 0 ; Windowreserved  DS.B 4 ; Long -  messageType  DS.B 2 ; Word -  drawType  DS.B 2 ; Word -    ENDRLERec RECORD 0 ; LineEditleLineHandle  DS.B 4 ; Handle - leLength  DS.B 2 ; unsigned Integer - leMaxLength  DS.B 2 ; unsigned Integer - leDestRect  DS Rect ; Rect - leViewRect  DS Rect ; Rect - lePort  DS.B 4 ; GrafPortPtr - leLineHite  DS.B 2 ; unsigned Integer - leBaseHite  DS.B 2 ; unsigned Integer - leSelStart  DS.B 2 ; unsigned Integer - leSelEnd  DS.B 2 ; unsigned Integer - leActFlg  DS.B 2 ; Word - leCarAct  DS.B 2 ; Word - leCarOn  DS.B 2 ; Word - leCarTime  DS.B 4 ; unsigned Longint - leHiliteHook  DS.B 4 ; VoidProcPtr - leCaretHook  DS.B 4 ; VoidProcPtr - leJust  DS.B 2 ; Word - lePWChar  DS.B 2 ; Word -   ENDRItemTemplate RECORD 0 ; DialogitemID  DS.B 2 ; Word - itemRect  DS Rect ; Rect - itemType  DS.B 2 ; Word - itemDescr  DS.B 4 ; Pointer - itemValue  DS.B 2 ; Word - itemFlag  DS.B 2 ; Word - itemColor  DS.B 4 ; Pointer - pointer to appropriate type of color table  ENDRAlertTemplate RECORD 0 ; DialogatBoundsRect  DS Rect ; Rect - atAlertID  DS.B 2 ; Word - atStage1  DS.B 1 ; Byte - atStage2  DS.B 1 ; Byte - atStage3  DS.B 1 ; Byte - atStage4  DS.B 1 ; Byte - atItemList  DS.B 4 ; ItemTempPtr[1] - Null terminated array  ENDRDialogTemplate RECORD 0 ; DialogdtBoundsRect  DS Rect ; Rect - dtVisible  DS.B 2 ; Boolean - dtRefCon  DS.B 4 ; Longint - dtItemList  DS.B 4 ; ItemTempPtr[1] - Null terminated array  ENDRIconRecord RECORD 0 ; DialogiconRect  DS Rect ; Rect - iconImage  DS.B 1 ; Byte[1] -   ENDRUserCtlItemPB RECORD 0 ; DialogdefProcParm  DS.B 4 ; Longint - ? should this be a LongProcPtr?titleParm  DS.B 4 ; Pointer - param2  DS.B 2 ; Word - param1  DS.B 2 ; Word -   ENDRPrPrinterSpecRec RECORD 0 ; PrintprPrinterType  DS.B 2 ; Word -  prCharacteristics  DS.B 2 ; Word -    ENDRPrInfoRec RECORD 0 ; PrintiDev  DS.B 2 ; Word - reserved for internal useiVRes  DS.B 2 ; Word - vertical resolution of printeriHRes  DS.B 2 ; Word - horizontal resolution of printerrPage  DS Rect ; Rect - defining page rectangle  ENDRPrJobRec RECORD 0 ; PrintiFstPage  DS.B 2 ; Word - first page to printiLstPage  DS.B 2 ; Word - last page to printiCopies  DS.B 2 ; Word - number of copiesbJDocLoop  DS.B 1 ; Byte - printing methodfFromUser  DS.B 1 ; Byte - used internallypIdleProc  DS.B 4 ; WordProcPtr - background procedurepFileName  DS.B 4 ; Pointer - spool file nameiFileVol  DS.B 2 ; Word - spool file volume reference numberbFileVers  DS.B 1 ; Byte - spool file version numberbJobX  DS.B 1 ; Byte - used internally  ENDRPrStyleRec RECORD 0 ; PrintwDev  DS.B 2 ; Word - output quality informationinternA  DS.B 6 ; Word[3] - for internal usefeed  DS.B 2 ; Word - paper feed typepaperType  DS.B 2 ; Word - paper typecrWidth  DS.B 2 ; Word - carriage Width for image writer or vertical sizing for lazer writerreduction  DS.B 2 ; Word - % reduction, laser writer onlyinternB  DS.B 2 ; Word - for internal use  ENDRPrRec RECORD 0 ; PrintprVersion  DS.B 2 ; Word - print manager versionprInfo  DS PrInfoRec ; PrInfoRec - printer infomation subrecordrPaper  DS Rect ; Rect - Defining paper rectangleprStl  DS PrStyleRec ; PrStyleRec - style subrecordprInfoPT  DS.B 14 ; Byte[14] - reserved for internal useprXInfo  DS.B 24 ; Byte[24] - reserved for internal useprJob  DS PrJobRec ; PrJobRec - job subrecordprintX  DS.B 38 ; Byte[38] - reserved for future useiReserved  DS.B 2 ; Word - reserved for internal use  ENDRPrStatusRec RECORD 0 ; PrintiTotPages  DS.B 2 ; Word - number of pages in spool fileiCurPage  DS.B 2 ; Word - page being printediTotCopies  DS.B 2 ; Word - number of copies requestediCurCopy  DS.B 2 ; Word - copy being printediTotBands  DS.B 2 ; Word - reserved for internal useiCurBand  DS.B 2 ; Word - reserved for internal usefPgDirty  DS.B 2 ; Word - TRUE if started printing pagefImaging  DS.B 2 ; Word - reserved for internal usehPrint  DS.B 4 ; PrRecHndl - handle of print recordpPrPort  DS.B 4 ; GrafPortPtr - pointer to grafport being use for printinghPic  DS.B 4 ; Long - reserved for internal use  ENDRReadConfigRec RECORD 0 ; ADBrcRepeatDelay  DS.B 1 ; Byte - Output Byte: Repeat / DelayrcLayoutOrLang  DS.B 1 ; Byte - Output Byte: Layout / LanguagercADBAddr  DS.B 1 ; Byte - Output Byte: ADB address - keyboard and mouse  ENDRSetConfigRec RECORD 0 ; ADBscADBAddr  DS.B 1 ; Byte - keyboard and mousescLayoutOrLang  DS.B 1 ; Byte - scRepeatDelay  DS.B 1 ; Byte -   ENDRSynchRec RECORD 0 ; ADBsynchMode  DS.B 1 ; Byte - synchKybdMouseAddr  DS.B 1 ; Byte - synchLayoutOrLang  DS.B 1 ; Byte - synchRepeatDelay  DS.B 1 ; Byte -   ENDRScaleRec RECORD 0 ; ADBxDivide  DS.B 2 ; Word - yDivide  DS.B 2 ; Word - xOffset  DS.B 2 ; Word - yOffset  DS.B 2 ; Word - xMultiply  DS.B 2 ; Word - yMultiply  DS.B 2 ; Word -   ENDRFontStatRec RECORD 0 ; FontresultID  DS FontID ; FontID - resultStats  DS.B 2 ; Word -   ENDRGSString255 RECORD 0 ; GSOSlength  DS.B 2 ; Word - Number of Chars in text field text  DS.B 255 ; char[255] -   ENDRGSString32 RECORD 0 ; GSOSlength  DS.B 2 ; Word - Number of characters in text fieldtext  DS.B 32 ; char[32] -   ENDRResultBuf255 RECORD 0 ; GSOSbufSize  DS.B 2 ; Word - bufString  DS GSString255 ; GSString255 -   ENDRResultBuf32 RECORD 0 ; GSOSbufSize  DS.B 2 ; Word - bufString  DS GSString32 ; GSString32 -   ENDRChangePathRecGS RECORD 0 ; GSOSpCount  DS.B 2 ; Word - pathname  DS.B 4 ; GSString255Ptr - newPathname  DS.B 4 ; GSString255Ptr -   ENDRCreateRecGS RECORD 0 ; GSOSpCount  DS.B 2 ; Word - pathname  DS.B 4 ; GSString255Ptr - access  DS.B 2 ; Word - fileType  DS.B 2 ; Word - auxType  DS.B 4 ; Long - storageType  DS.B 2 ; Word - eof  DS.B 4 ; Long - resourceEOF  DS.B 4 ; Long -   ENDRDAccessRecGS RECORD 0 ; GSOSpCount  DS.B 2 ; Word - devNum  DS.B 2 ; Word - code  DS.B 2 ; Word - list  DS.B 4 ; Pointer - requestCount  DS.B 4 ; Long - transferCount  DS.B 4 ; Long -   ENDRDevNumRecGS RECORD 0 ; GSOSpCount  DS.B 2 ; Word - devName  DS.B 4 ; GSString255Ptr - devNum  DS.B 2 ; Word -   ENDRDInfoRecGS RECORD 0 ; GSOSpCount  DS.B 2 ; Word - minimum = 2devNum  DS.B 2 ; Word - devName  DS.B 4 ; GSString32Ptr - characteristics  DS.B 2 ; Word - totalBlocks  DS.B 4 ; Long - slotNum  DS.B 2 ; Word - unitNum  DS.B 2 ; Word - version  DS.B 2 ; Word - deviceID  DS.B 2 ; Word - headLink  DS.B 2 ; Word - forwardLink  DS.B 2 ; Word - extendedDIBptr  DS.B 4 ; Long -   ENDRDIORecGS RECORD 0 ; GSOSpCount  DS.B 2 ; Word - devNum  DS.B 2 ; Word - buffer  DS.B 4 ; Pointer - requestCount  DS.B 4 ; Long - startingBlock  DS.B 4 ; Long - blockSize  DS.B 2 ; Word - transferCount  DS.B 4 ; Long -   ENDRDirEntryRecGS RECORD 0 ; GSOSpCount  DS.B 2 ; Word - refNum  DS.B 2 ; Word - flags  DS.B 2 ; Word - base  DS.B 2 ; Word - displacement  DS.B 2 ; Word - name  DS.B 4 ; Pointer - entryNum  DS.B 2 ; Word - fileType  DS.B 2 ; Word - eof  DS.B 4 ; Longint - blockCount  DS.B 4 ; Long - createDateTime  DS TimeRec ; TimeRec - modDateTime  DS TimeRec ; TimeRec - access  DS.B 2 ; Word - auxType  DS.B 4 ; Long - fileSysID  DS.B 2 ; Word - optionList  DS.B 4 ; ResultBuf255Ptr - resourceEOF  DS.B 4 ; Long - resourceBlocks  DS.B 4 ; Long -   ENDRExpandPathRecGS RECORD 0 ; GSOSpCount  DS.B 2 ; Word - inputPath  DS.B 4 ; GSString255Ptr - outputPath  DS.B 4 ; ResultBuf255Ptr - flags  DS.B 2 ; Word -   ENDRFileInfoRecGS RECORD 0 ; GSOSpCount  DS.B 2 ; Word - pathname  DS.B 4 ; GSString255Ptr - access  DS.B 2 ; Word - fileType  DS.B 2 ; Word - auxType  DS.B 4 ; Long - storageType  DS.B 2 ; Word - must be 0 for SetFileInfocreateDateTime  DS TimeRec ; TimeRec - modDateTime  DS TimeRec ; TimeRec - optionList  DS.B 4 ; Long - eof  DS.B 4 ; Long - blocksUsed  DS.B 4 ; Long - must be 0 for SetFileInforesourceEOF  DS.B 4 ; Long - must be 0 for SetFileInforesourceBlocks  DS.B 4 ; Long - must be 0 for SetFileInfo  ENDRFormatRecGS RECORD 0 ; GSOSpCount  DS.B 2 ; Word - devName  DS.B 4 ; GSString32Ptr - device name pointervolName  DS.B 4 ; GSString32Ptr - volume name pointerfileSysID  DS.B 2 ; Word - file system IDreqFileSysID  DS.B 2 ; Word - in;   ENDRFSTInfoRecGS RECORD 0 ; GSOSpCount  DS.B 2 ; Word - fstNum  DS.B 2 ; Word - fileSysId  DS.B 2 ; Word - fstName  DS.B 4 ; ResultBuf255Ptr - version  DS.B 2 ; Word - attributes  DS.B 2 ; Word - blockSize  DS.B 2 ; Word - maxVolSize  DS.B 4 ; Long - maxFileSize  DS.B 4 ; Long -   ENDRInterruptRecGS RECORD 0 ; GSOSpCount  DS.B 2 ; Word - intNum  DS.B 2 ; Word - vrn  DS.B 2 ; Word - used only by BindIntintCode  DS.B 4 ; Long - used only by BindInt  ENDRIORecGS RECORD 0 ; GSOSpCount  DS.B 2 ; Word - refNum  DS.B 2 ; Word - dataBuffer  DS.B 4 ; Pointer - requestCount  DS.B 4 ; Long - transferCount  DS.B 4 ; Long - cachePriority  DS.B 2 ; Word -   ENDRLevelRecGS RECORD 0 ; GSOSpCount  DS.B 2 ; Word - level  DS.B 2 ; Word -   ENDRNameRecGS RECORD 0 ; GSOSpCount  DS.B 2 ; Word - pathname  DS.B 4 ; GSString255Ptr - full pathname or a filename depending on call  ENDRNewlineRecGS RECORD 0 ; GSOSpCount  DS.B 2 ; Word - refNum  DS.B 2 ; Word - enableMask  DS.B 2 ; Word - numChars  DS.B 2 ; Word - newlineTable  DS.B 4 ; Pointer -   ENDROpenRecGS RECORD 0 ; GSOSpCount  DS.B 2 ; Word - refNum  DS.B 2 ; Word - pathname  DS.B 4 ; GSString255Ptr - requestAccess  DS.B 2 ; Word - resourceNumber  DS.B 2 ; Word - For extended files: dataFork/resourceForkaccess  DS.B 2 ; Word - Value of file's access attributefileType  DS.B 2 ; Word - Value of file's fileType attributeauxType  DS.B 4 ; Long - storageType  DS.B 2 ; Word - createDateTime  DS TimeRec ; TimeRec - modDateTime  DS TimeRec ; TimeRec - optionList  DS.B 4 ; WordPtr - eof  DS.B 4 ; Long - blocksUsed  DS.B 4 ; Long - resourceEOF  DS.B 4 ; Long - resourceBlocks  DS.B 4 ; Long -   ENDROSShutdownRecGS RECORD 0 ; GSOSpCount  DS.B 2 ; Word - inshutdownFlag  DS.B 2 ; Word - in  ENDRPositionRecGS RECORD 0 ; GSOSpCount  DS.B 2 ; Word - refNum  DS.B 2 ; Word - position  DS.B 4 ; Long -   ENDREOFRecGS RECORD 0 ; GSOSpCount  DS.B 2 ; Word - refNum  DS.B 2 ; Word - eof  DS.B 4 ; Long -   ENDRQuitRecGS RECORD 0 ; GSOSpCount  DS.B 2 ; Word - pathname  DS.B 4 ; GSString255Ptr - pathname of next app to runflags  DS.B 2 ; Word -   ENDRRefNumRecGS RECORD 0 ; GSOSpCount  DS.B 2 ; Word - refNum  DS.B 2 ; Word -   ENDRSessionStatusRecGS RECORD 0 ; GSOSpCount  DS.B 2 ; Word - in: min = 1status  DS.B 2 ; Word - out:  ENDRSetPositionRecGS RECORD 0 ; GSOSpCount  DS.B 2 ; Word - refNum  DS.B 2 ; Word - base  DS.B 2 ; Word - displacement  DS.B 4 ; Long -   ENDRSysPrefsRecGS RECORD 0 ; GSOSpCount  DS.B 2 ; Word - preferences  DS.B 2 ; Word -   ENDRVersionRecGS RECORD 0 ; GSOSpCount  DS.B 2 ; Word - version  DS.B 2 ; Word -   ENDRVolumeRecGS RECORD 0 ; GSOSpCount  DS.B 2 ; Word - devName  DS.B 4 ; GSString32Ptr - volName  DS.B 4 ; ResultBuf255Ptr - totalBlocks  DS.B 4 ; Long - freeBlocks  DS.B 4 ; Long - fileSysID  DS.B 2 ; Word - blockSize  DS.B 2 ; Word -   ENDRIntDivRec RECORD 0 ; IntMathquotient  DS.B 2 ; Integer - quotient from SDivideremainder  DS.B 2 ; Integer - remainder from SDivide  ENDRLongDivRec RECORD 0 ; IntMathquotient  DS.B 4 ; Longint - Quotient from LongDivremainder  DS.B 4 ; Longint - remainder from LongDiv  ENDRLongMulRec RECORD 0 ; IntMathlsResult  DS.B 4 ; Longint - low 2 words of productmsResult  DS.B 4 ; Longint - High 2 words of product  ENDRWordDivRec RECORD 0 ; IntMathquotient  DS.B 2 ; Word - Quotient from UDivideremainder  DS.B 2 ; Word - remainder from UDivide  ENDRLColorTable RECORD 0 ; ListlistFrameClr  DS.B 2 ; Word - Frame colorlistNorTextClr  DS.B 2 ; Word - Unhighlighted text colorlistSelTextClr  DS.B 2 ; Word - Highlighted text colorlistNorBackClr  DS.B 2 ; Word - Unhighlighted background colorlistSelBackClr  DS.B 2 ; Word - Highlighted backgraound color  ENDRMemRec RECORD 0 ; ListmemPtr  DS.B 4 ; Pointer - Pointer to string, or custommemFlag  DS.B 1 ; Byte - Bit Flag  ENDRListCtlRec RECORD 0 ; ListctlNext  DS.B 4 ; CtlRecHndl - Handle of Next ControlctlOwner  DS.B 4 ; GrafPortPtr - Window ownerctlRect  DS Rect ; Rect - Enclosing RectctlFlag  DS.B 1 ; Byte - Bit 7 visible, Bit 0 string type, Bit 1 multiplectlHilite  DS.B 1 ; Byte - (not used)ctlValue  DS.B 2 ; Word - First member in displayctlProc  DS.B 4 ; LongProcPtr - Address of list definition procedurectlAction  DS.B 4 ; LongProcPtr - Address of list action procedurectlData  DS.B 4 ; Long - Low = view size, High = total membersctlRefCon  DS.B 4 ; Long - Not usedctlColor  DS.B 4 ; LColorTablePtr - Null for default colorsctlMemDraw  DS.B 4 ; VoidProcPtr - Address of routine to draw membersctlMemHeight  DS.B 2 ; Word - Member's Height in PixelsctlMemSize  DS.B 2 ; Word - Bytes in member recordctlList  DS.B 4 ; MemRecPtr - Adress of first member record in arrayctlListBar  DS.B 4 ; CtlRecHndl - Handle of list contrlo's scroll bar control  ENDRListRec RECORD 0 ; ListlistRect  DS Rect ; Rect - Enclosing RectanglelistSize  DS.B 2 ; Word - Number of List MemberslistView  DS.B 2 ; Word - Max Viewable memberslistType  DS.B 2 ; Word - Bit FlaglistStart  DS.B 2 ; Word - First member in viewlistCtl  DS.B 4 ; CtlRecHndl - List control's handlelistDraw  DS.B 4 ; VoidProcPtr - Address of Custom drawing routinelistMemHeight  DS.B 2 ; Word - Height of list memberslistMemSize  DS.B 2 ; Word - Size of Member RecordslistPointer  DS.B 4 ; MemRecPtr - Pointer to first element in MemRec arraylistRefCon  DS.B 4 ; Long - becomes Control's refConlistScrollClr  DS.B 4 ; BarColorsPtr - Color table for list's scroll bar  ENDRInitialLoadOutputRec RECORD 0 ; LoaderuserID  DS.B 2 ; Word - startAddr  DS.B 4 ; Pointer - dPageAddr  DS.B 2 ; Word - buffSize  DS.B 2 ; Word -   ENDRRestartOutRec RECORD 0 ; LoaderuserID  DS.B 2 ; Word - startAddr  DS.B 4 ; Pointer - dPageAddr  DS.B 2 ; Word - buffSize  DS.B 2 ; Word -   ENDRLoadSegNameOut RECORD 0 ; LoadersegAddr  DS.B 4 ; Pointer - fileNum  DS.B 2 ; Word - segNum  DS.B 2 ; Word -   ENDRUnloadSegOutRec RECORD 0 ; LoaderuserID  DS.B 2 ; Word - fileNum  DS.B 2 ; Word - segNum  DS.B 2 ; Word -   ENDRQDIconRecord RECORD 0 ; QDAuxiconType  DS.B 2 ; Word -  iconSize  DS.B 2 ; Word -  iconHeight  DS.B 2 ; Word -  iconWidth  DS.B 2 ; Word -  iconImage  DS.B 1 ; Byte[1] -  iconMask  DS.B 1 ; Byte[1] -    ENDRMessageRec RECORD 0 ; LocatormessageNext  DS.B 4 ; MessageRecHndl -  messageType  DS.B 2 ; Integer -  messageData  DS.B 2 ; Integer -  fileNames  DS.B 100 ; Str255[1] -    ENDRToolSpec RECORD 0 ; LocatortoolNumber  DS.B 2 ; Word -  minVersion  DS.B 2 ; Word -    ENDRStartStopRecord RECORD 0 ; Locatorflags  DS.B 2 ; Word -  videoMode  DS.B 2 ; Word -  resFileID  DS.B 2 ; Word -  dPageHandle  DS.B 4 ; Handle -  numTools  DS.B 2 ; Word -    ENDRMenuRec RECORD 0 ; MenumenuID  DS.B 2 ; Word - Menu's ID numbermenuWidth  DS.B 2 ; Word - Width of menumenuHeight  DS.B 2 ; Word - Height of menumenuProc  DS.B 4 ; WordProcPtr - Menu's definition proceduremenuFlag  DS.B 1 ; Byte - Bit flagsmenuRes  DS.B 1 ; Byte - firstItem  DS.B 1 ; Byte - numOfItems  DS.B 1 ; Byte - titleWidth  DS.B 2 ; Word - Width of menu's titletitleName  DS.B 4 ; Pointer - Menu's title  ENDRMiBufInfo RECORD 0 ; MidibufSize  DS.B 2 ; Word - size of buffer (0 for default)address  DS.B 4 ; Pointer - address of buffer (0 for auto-allocation)  ENDRMiDriverInfo RECORD 0 ; Midislot  DS.B 2 ; Word - device slotexternal  DS.B 2 ; Word - slot internal (=0) / external (=1)pathname  DS.B 65 ; Byte[65] - device driver pathname  ENDRLocRec RECORD 0 ; NoteSeqcurPhraseItem  DS.B 2 ; Word - curPattItem  DS.B 2 ; Word - curLevel  DS.B 2 ; Word -   ENDREnvelope RECORD 0 ; Notesynst1BkPt  DS.B 1 ; Byte - st1Increment  DS.B 2 ; Word - st2BkPt  DS.B 1 ; Byte - st2Increment  DS.B 2 ; Word - st3BkPt  DS.B 1 ; Byte - st3Increment  DS.B 2 ; Word - st4BkPt  DS.B 1 ; Byte - st4Increment  DS.B 2 ; Word - st5BkPt  DS.B 1 ; Byte - st5Increment  DS.B 2 ; Word - st6BkPt  DS.B 1 ; Byte - st6Increment  DS.B 2 ; Word - st7BkPt  DS.B 1 ; Byte - st7Increment  DS.B 2 ; Word - st8BkPt  DS.B 1 ; Byte - st8Increment  DS.B 2 ; Word -   ENDRWaveForm RECORD 0 ; NotesynwfTopKey  DS.B 1 ; Byte - wfWaveAddress  DS.B 1 ; Byte - wfWaveSize  DS.B 1 ; Byte - wfDocMode  DS.B 1 ; Byte - wfRelPitch  DS.B 2 ; Word -   ENDRInstrument RECORD 0 ; NotesyntheEnvelope  DS Envelope ; Envelope - releaseSegment  DS.B 1 ; Byte - priorityIncrement  DS.B 1 ; Byte - pitchBendRange  DS.B 1 ; Byte - vibratoDepth  DS.B 1 ; Byte - vibratoSpeed  DS.B 1 ; Byte - inSpare  DS.B 1 ; Byte - aWaveCount  DS.B 1 ; Byte - bWaveCount  DS.B 1 ; Byte - aWaveList  DS.B 6 ; WaveForm[1] - bWaveList  DS.B 6 ; WaveForm[1] -   ENDRBlockRec RECORD 0 ; ProDOSblockDevNum  DS.B 2 ; Word - blockDataBuffer  DS.B 4 ; Ptr - blockNum  DS.B 4 ; Longint -   ENDRDevNumRec RECORD 0 ; ProDOSdevName  DS.B 4 ; Ptr - devNum  DS.B 2 ; Word -   ENDRDInfoRec RECORD 0 ; ProDOSdevNum  DS.B 2 ; Word - devName  DS.B 4 ; Ptr -   ENDRDirEntryRec RECORD 0 ; ProDOSrefNum  DS.B 2 ; Word - reserved  DS.B 2 ; Word - base  DS.B 2 ; Word - displacement  DS.B 2 ; Word - nameBuffer  DS.B 4 ; Pointer - entryNum  DS.B 2 ; Word - fileType  DS.B 2 ; Word - endOfFile  DS.B 4 ; Longint - blockCount  DS.B 4 ; Long - createTime  DS TimeRec ; TimeRec - modTime  DS TimeRec ; TimeRec - access  DS.B 2 ; Word - auxType  DS.B 4 ; Long - fileSysID  DS.B 2 ; Word -   ENDREOFRec RECORD 0 ; ProDOSeofRefNum  DS.B 2 ; Word - eofPosition  DS.B 4 ; Longint -   ENDRFileIORec RECORD 0 ; ProDOSfileRefNum  DS.B 2 ; Word - dataBuffer  DS.B 4 ; Ptr - requestCount  DS.B 4 ; Longint - transferCount  DS.B 4 ; Longint -   ENDRFileRec RECORD 0 ; ProDOSpathname  DS.B 4 ; Ptr - fAccess  DS.B 2 ; Word - fileType  DS.B 2 ; Word - auxType  DS.B 4 ; Longint - storageType  DS.B 2 ; Word - createDate  DS.B 2 ; Word - createTime  DS.B 2 ; Word - modDate  DS.B 2 ; Word - modTime  DS.B 2 ; Word - blocksUsed  DS.B 4 ; Longint -   ENDRFormatRec RECORD 0 ; ProDOSdevName  DS.B 4 ; Ptr - device name pointervolName  DS.B 4 ; Ptr - device name pointerfileSysID  DS.B 2 ; Word - file system ID  ENDREraseDiskRec RECORD 0 ; ProDOSdevName  DS.B 4 ; Ptr - device name pointervolName  DS.B 4 ; Ptr - device name pointerfileSysID  DS.B 2 ; Word - file system ID  ENDRInterruptRec RECORD 0 ; ProDOSintNum  DS.B 2 ; Word - intCode  DS.B 4 ; Ptr -   ENDRMarkRec RECORD 0 ; ProDOSmarkRefNum  DS.B 2 ; Word - position  DS.B 4 ; Long -   ENDRNewLineRec RECORD 0 ; ProDOSnewLRefNum  DS.B 2 ; Word - enableMask  DS.B 2 ; Word - newlineChar  DS.B 2 ; Word -   ENDROpenRec RECORD 0 ; ProDOSopenRefNum  DS.B 2 ; Word - openPathname  DS.B 4 ; Ptr - ioBuffer  DS.B 4 ; Handle -   ENDRPathNameRec RECORD 0 ; ProDOSpathname  DS.B 4 ; Ptr - newPathname  DS.B 4 ; Ptr -   ENDRPrefixRec RECORD 0 ; ProDOSprefixNum  DS.B 2 ; Word - prefix  DS.B 4 ; Ptr -   ENDRQuitRec RECORD 0 ; ProDOSquitPathname  DS.B 4 ; Ptr - flags  DS.B 2 ; Word -   ENDRVolumeRec RECORD 0 ; ProDOSdeviceName  DS.B 4 ; Ptr - volName  DS.B 4 ; Ptr - totalBlocks  DS.B 4 ; Long - freeBlocks  DS.B 4 ; Long - fileSysID  DS.B 2 ; Word -   ENDRExpandPathRec RECORD 0 ; ProDOSinputPath  DS.B 4 ; StringPtr -  outputPath  DS.B 4 ; StringPtr -  flags  DS.B 2 ; Word -    ENDRResHeaderRec RECORD 0 ; ResourcesrFileVersion  DS.B 4 ; Long - Format version of resource forkrFileToMap  DS.B 4 ; Long - Offset from start to resource map recordrFileMapSize  DS.B 4 ; Long - Number of bytes map occupies in filerFileMemo  DS.B 128 ; byte[128] - Reserved space for applicationrFileRecSize  DS.B 4 ; Long - Size of ResHeaderRec Record  ENDRFreeBlockRec RECORD 0 ; ResourcesblkOffset  DS.B 4 ; Long - blkSize  DS.B 4 ; Long -   ENDRResMap RECORD 0 ; ResourcesmapNext  DS.B 40 ; ResMapHandle - Handle to next resource mapmapFlag  DS.B 2 ; Word - Bit FlagsmapOffset  DS.B 4 ; Long - Map's file positionmapSize  DS.B 4 ; Long - Number of bytes map occupies in filemapToIndex  DS.B 2 ; Word - mapFileNum  DS.B 2 ; Word - mapID  DS.B 2 ; Word - mapIndexSize  DS.B 4 ; Long - mapIndexUsed  DS.B 4 ; Long - mapFreeListSize  DS.B 2 ; Word - mapFreeListUsed  DS.B 2 ; Word - n bytes (array of free block records)mapFreeList  DS.B 8 ; FreeBlockRec[1] -    ENDRResRefRec RECORD 0 ; ResourcesresType  DS.B 2 ; ResType - resID  DS.B 4 ; ResID - resOffset  DS.B 4 ; Long - resAttr  DS.B 2 ; ResAttr - resSize  DS.B 4 ; Long - resHandle  DS.B 4 ; Handle -   ENDRResourceSpec RECORD 0 ; ResourcesresourceType  DS.B 2 ; ResType -  resourceID  DS.B 4 ; ResID -    ENDRResNameEntry RECORD 0 ; ResourcesnamedResID  DS.B 4 ; ResID -  resName  DS Str255 ; Str255 -    ENDRResNameRecord RECORD 0 ; Resourcesversion  DS.B 2 ; word -  nameCount  DS.B 4 ; long -  resNameEntries  DS.B 4 ; ResNameEntry[1] -    ENDRGetLInfoPB RECORD 0 ; Shellsfile  DS.B 4 ; Ptr - address of source file namedfile  DS.B 4 ; Ptr - address of output file nameparms  DS.B 4 ; Ptr - address of parameter listlstring  DS.B 4 ; Ptr - address of language specific input stringmerr  DS.B 1 ; Byte - max error level allowedmerrf  DS.B 1 ; Byte - max error level foundlops  DS.B 1 ; Byte - operations flagkflag  DS.B 1 ; Byte - KEEP flagmflags  DS.B 4 ; unsigned long - set of letters selected with '-'pflags  DS.B 4 ; unsigned long - set of letters selected with '+'org  DS.B 4 ; unsigned long - abs start address of non-relloc load file  ENDRSoundParamBlock RECORD 0 ; SoundwaveStart  DS.B 4 ; Pointer - starting address of wavewaveSize  DS.B 2 ; Word - waveform size in pagesfreqOffset  DS.B 2 ; Word - ? formula to be provideddocBuffer  DS.B 2 ; Word - DOC buffer start address, low byte = 0bufferSize  DS.B 2 ; Word - DOC buffer start address, low byte = 0nextWavePtr  DS.B 4 ; SoundPBPtr - Pointer to start of next wave's parameter blockvolSetting  DS.B 2 ; Word - DOC volume setting. High byte = 0  ENDRDocRegParamBlk RECORD 0 ; SoundoscGenType  DS.B 2 ; Word -  freqLow1  DS.B 1 ; Byte -  freqHigh1  DS.B 1 ; Byte -  vol1  DS.B 1 ; Byte -  tablePtr1  DS.B 1 ; Byte -  control1  DS.B 1 ; Byte -  tableSize1  DS.B 1 ; Byte -  freqLow2  DS.B 1 ; Byte -  freqHigh2  DS.B 1 ; Byte -  vol2  DS.B 1 ; Byte -  tablePtr2  DS.B 1 ; Byte -  control2  DS.B 1 ; Byte -  tableSize2  DS.B 1 ; Byte -    ENDRSFReplyRec RECORD 0 ; StdFilegood  DS.B 2 ; Boolean - TRUE for open; FALSE for cancelfileType  DS.B 2 ; Word - ProDOS file typeauxFileType  DS.B 2 ; Word - ProDOS aux file typefilename  DS.B 16 ; char[16] - length byte - Name of file in prefix 0fullPathname  DS.B 129 ; char[129] - length byte - The full pathname of the selected file.  ENDRSFReplyRec2 RECORD 0 ; StdFilegood  DS.B 2 ; Boolean -  filetype  DS.B 2 ; Word -  auxType  DS.B 4 ; Long -  nameDesc  DS.B 2 ; RefDescriptor -  nameRef  DS.B 4 ; Ref -  pathDesc  DS.B 2 ; RefDescriptor -  pathRef  DS.B 4 ; Ref -    ENDRmultiReplyRecord RECORD 0 ; StdFilegood  DS.B 2 ; Word -  namesHandle  DS.B 4 ; Handle -    ENDRSFTypeList RECORD 0 ; StdFilenumEntries  DS.B 1 ; byte -  fileTypeEntries  DS.B 5 ; byte[5] -    ENDRTypeSelector2 RECORD 0 ; StdFileflags  DS.B 2 ; Word -  fileType  DS.B 2 ; Word -  auxType  DS.B 4 ; Long -    ENDRSFTypeList2 RECORD 0 ; StdFilenumEntries  DS.B 2 ; Word -  fileTypeEntries  DS.B 40 ; TypeSelector2[5] -    ENDRTEColorTable RECORD 0 ; TextEditcontentColor  DS.B 2 ; word -  outlineColor  DS.B 2 ; word -  pageBoundaryColor  DS.B 2 ; word -  hiliteForeColor  DS.B 2 ; word -  hiliteBackColor  DS.B 2 ; word -  vertColorDescriptor  DS.B 2 ; word -  vertColorRef  DS.B 4 ; long -  horzColorDescriptor  DS.B 2 ; word -  horzColorRef  DS.B 4 ; long - growColorDescriptor  DS.B 2 ; word -  growColorRef  DS.B 4 ; long -    ENDRTERecord RECORD 0 ; TextEditctlNext  DS.B 4 ; CtlRecHndl -  ctlOwner  DS.B 4 ; WindowPtr -  ctlRect  DS Rect ; Rect -  ctlFlag  DS.B 1 ; Byte -  ctlHilite  DS.B 1 ; Byte -  ctlValue  DS.B 2 ; Word -  ctlProc  DS.B 4 ; ProcPtr -  ctlAction  DS.B 4 ; ProcPtr -  ctlData  DS.B 4 ; Long -  ctlRefCon  DS.B 4 ; Long -  ctlColorRef  DS.B 4 ; TEColorTablePtr -  reserved  DS.B 16 ; byte[16] -  ctlID  DS.B 4 ; long -  ctlMoreFlags  DS.B 2 ; Word -  ctlVersion  DS.B 2 ; Word -  theChar  DS.B 2 ; Word -  theModifiers  DS.B 2 ; Word -  extendFlag  DS.B 2 ; Word -  moveByWord  DS.B 2 ; Word -  inputPtr  DS.B 4 ; Ptr -  inputLength  DS.B 4 ; Long -  theRect  DS Rect ; Rect -    ENDRTETabItem RECORD 0 ; TextEdittabKind  DS.B 2 ; Word -  tabData  DS.B 2 ; Word -    ENDRTERuler RECORD 0 ; TextEditleftMargin  DS.B 2 ; Word -  leftIndent  DS.B 2 ; Word -  rightMargin  DS.B 2 ; Word -  just  DS.B 2 ; Word -  extraLS  DS.B 2 ; Word -  flags  DS.B 2 ; Word -  userData  DS.B 2 ; Word -  tabType  DS.B 2 ; Word -  tabs  DS.B 4 ; TETabItem[1] -  tabTerminator  DS.B 2 ; Word -    ENDRTEStyle RECORD 0 ; TextEditteFont  DS FontID ; FontID -  foreColor  DS.B 2 ; Word -  backColor  DS.B 2 ; Word -  reserved  DS.B 4 ; Long -    ENDRTEStyleGroup RECORD 0 ; TextEditcount  DS.B 2 ; word -  styles  DS.B 12 ; TEStyle[1] -    ENDRTEStyleItem RECORD 0 ; TextEditlength  DS.B 4 ; long -  offset  DS.B 4 ; long -    ENDRTEFormat RECORD 0 ; TextEditversion  DS.B 2 ; word -  rulerListLength  DS.B 4 ; long -  theRulerList  DS.B 22 ; TERuler[1] -  styleListLength  DS.B 4 ; long -  theStyleList  DS.B 12 ; TEStyle[1] -  numberOfStyles  DS.B 4 ; long -  theStyles  DS.B 8 ; TEStyleItem[1] -    ENDRTEInfoRec RECORD 0 ; TextEditcharCount  DS.B 4 ; long -  lineCount  DS.B 4 ; long -  formatMemory  DS.B 4 ; long -  totalMemory  DS.B 4 ; long -  styleCount  DS.B 4 ; long -  rulerCount  DS.B 4 ; long -    ENDRTEHooks RECORD 0 ; TextEditcharFilter  DS.B 4 ; ProcPtr -  wordWrap  DS.B 4 ; ProcPtr -  wordBreak  DS.B 4 ; ProcPtr -  drawText  DS.B 4 ; ProcPtr -  eraseText  DS.B 4 ; ProcPtr -    ENDRDeviceRec RECORD 0 ; TextToolptrOrSlot  DS.B 4 ; Long - slot number or jump table ptrdeviceType  DS.B 2 ; Word - type of input device  ENDRTxtMaskRec RECORD 0 ; TextToolorMask  DS.B 2 ; Word - andMask  DS.B 2 ; Word -   ENDRGET_INFO_PARAM RECORD 0 ; AppleTalkAsync_Flag  DS.B 1 ; Byte - Command  DS.B 1 ; Byte - Result_Code  DS.B 2 ; Word - Completion_Rtn_Return  DS.B 4 ; Long - This_Net  DS.B 2 ; Word - A_Bridge  DS.B 1 ; Byte - Hardware_ID  DS.B 1 ; Byte - ROM_Version  DS.B 2 ; Word - Node_Number  DS.B 1 ; Byte -   ENDRGET_GLOBAL_PARAM RECORD 0 ; AppleTalkAsync_Flag  DS.B 1 ; Byte - Command  DS.B 1 ; Byte - Result_Code  DS.B 2 ; Word - Buffer_Pointer  DS.B 4 ; Long -   ENDRGET_GLOBAL_BUFFER RECORD 0 ; AppleTalkLAP_Destination_Node  DS.B 1 ; Byte - LAP_Source_Node  DS.B 1 ; Byte - LAP_Type  DS.B 1 ; Byte - Hop_Count_DL  DS.B 1 ; Byte - Datagram_Length  DS.B 1 ; Byte - DDP_Checksum  DS.B 2 ; Word - Destination_Network  DS.B 2 ; Word - Source_Network  DS.B 2 ; Word - Destination_Node  DS.B 1 ; Byte - Source_Node  DS.B 1 ; Byte - Destination_Socket  DS.B 1 ; Byte - Source_Socket  DS.B 1 ; Byte - DDP_Type  DS.B 1 ; Byte - Packet_Length  DS.B 2 ; Word -   ENDRINSTALL_TIMER_PARAM RECORD 0 ; AppleTalkAsync_Flag  DS.B 1 ; Byte - Command  DS.B 1 ; Byte - Result_Code  DS.B 2 ; Word - Completion_Rtn_Return  DS.B 4 ; Long - Running_Tick_Count  DS.B 2 ; Word - Ticks_to_Complete  DS.B 2 ; Word - Reserved  DS.B 4 ; Pointer -   ENDRREMOVE_TIMER_PARAM RECORD 0 ; AppleTalkAsync_Flag  DS.B 1 ; Byte - Command  DS.B 1 ; Byte - Result_Code  DS.B 2 ; Word - Reserved  DS.B 12 ; Byte[12] -   ENDRBOOT_PARAM RECORD 0 ; AppleTalkAsync_Flag  DS.B 1 ; Byte - Command  DS.B 1 ; Byte - Result_Code  DS.B 2 ; Word -   ENDRSP_GET_PARMS_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - PAP command to executeResult  DS.B 2 ; Word - error result from a PAP operationMaxCmdSize  DS.B 2 ; Word - MaxDataSize  DS.B 2 ; Word -   ENDRSP_GET_STATUS_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - PAP command to executeResult  DS.B 2 ; Word - error result from a PAP operationcompletionPtr  DS.B 4 ; Long - pointer to the completion routineSLSNet  DS.B 2 ; Word - SLS Network NumberSLSNode  DS.B 1 ; Byte - SLS Node NumberSLSSocket  DS.B 1 ; Byte - SLS Socket NumberBufferLen  DS.B 2 ; Word - Buffer LengthBufferAddr  DS.B 4 ; Long - Buffer AddressDataLen  DS.B 2 ; Word - Length of Status Data  ENDRSP_OPEN_SESSION_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - PAP command to executeResult  DS.B 2 ; Word - error result from a PAP operationcompletionPtr  DS.B 4 ; Long - pointer to the completion routineSLSNet  DS.B 2 ; Word - SLS Network NumberSLSNode  DS.B 1 ; Byte - SLS Node NumberSLSSocket  DS.B 1 ; Byte - SLS Socket NumberAttnRtnAddr  DS.B 4 ; Long - Attention Routine AddrRefNum  DS.B 1 ; Byte - Session Reference Number  ENDRSP_CLOSE_SESSION_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - PAP command to executeResult  DS.B 2 ; Word - error result from a PAP operationcompletionPtr  DS.B 4 ; Long - pointer to the completion routineRefNum  DS.B 1 ; Byte - Session Reference Number  ENDRSP_COMMAND_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - PAP command to executeResult  DS.B 2 ; Word - error result from a PAP operationcompletionPtr  DS.B 4 ; Long - pointer to the completion routineRefNum  DS.B 1 ; Byte - Session Reference NumberCmdBlkLen  DS.B 2 ; Word - Command Block LengthCmdBlkAddr  DS.B 4 ; Long - Command Block AddressReplyBufLen  DS.B 2 ; Word - Reply Buffer LengthReplyBufAddr  DS.B 4 ; Long - Reply Buffer AddressCmdResult  DS.B 4 ; Long - Command ResultReplyLen  DS.B 2 ; Word - Reply Length  ENDRSP_WRITE_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - PAP command to executeResult  DS.B 2 ; Word - error result from a PAP operationcompletionPtr  DS.B 4 ; Long - pointer to the completion routineRefNum  DS.B 1 ; Byte - Session Reference NumberCmdBlkLen  DS.B 2 ; Word - Command Block LengthCmdBlkAddr  DS.B 4 ; Long - Command Block AddressWriteDataLen  DS.B 2 ; Word - Write Data LengthWriteDataAddr  DS.B 4 ; Long - Write Data AddressReplyBufLen  DS.B 2 ; Word - Reply Buffer LengthReplyBufAddr  DS.B 4 ; Long - Reply Buffer AddressCmdResult  DS.B 4 ; Long - Command ResultWrittenLen  DS.B 2 ; Word - Written LengthReplyLen  DS.B 2 ; Word - Reply Length  ENDRSERVER RECORD 0 ; AppleTalkServerName  DS.B 4 ; Pointer - Pointer to a Server EntityNet  DS.B 2 ; Word - Net of the serverNode  DS.B 1 ; Byte - Node of the serverSocket  DS.B 1 ; Byte - Socket number of the server  ENDRSEND_ATP_REQ_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - ATP command to executeResult  DS.B 2 ; Word - error result from the ATP operationcompletionPtr  DS.B 4 ; Long - pointer to the completion routinesocketID  DS.B 1 ; Byte - dynamic socket numberdestNetID  DS.B 2 ; Word - destination network #destNodeID  DS.B 1 ; Byte - destination node #destSocketID  DS.B 1 ; Byte - destination socket #transactionID  DS.B 2 ; Word - transaction ID #reqBuffLen  DS.B 2 ; Word - request buffer lengthreqBuffPtr  DS.B 4 ; Long - pointer to the request bufferuserBytes  DS.B 4 ; Long - user BYTEsnumberRespBuffs  DS.B 1 ; Byte - number of response buffersrespBuffPtr  DS.B 4 ; Long - pointer to the response bufferatpFlags  DS.B 1 ; Byte - flags for ATP transactionrinterval  DS.B 1 ; Byte - timeout before retryingrcount  DS.B 1 ; Byte - number of retries to attemptbitMap  DS.B 1 ; Byte - bitmap indicating for packet receptionresponseRcv  DS.B 1 ; Byte - number of responses receivedreserved  DS.B 1 ; Byte - reserved for future use  ENDRCANCEL_ATP_REQ_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - ATP command to executeResult  DS.B 2 ; Word - error result from ATP operationtransactionID  DS.B 2 ; Word - transaction ID #  ENDROPEN_ATP_SOCKET_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - ATP command to executeResult  DS.B 2 ; Word - error result from the ATP operationsocketID  DS.B 1 ; Byte - socket number to open  ENDRCLOSE_ATP_SOCKET_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - ATP command to executeResult  DS.B 2 ; Word - error result from ATP operationsocketID  DS.B 1 ; Byte - socket number for closing  ENDRGET_ATP_REQ_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - ATP command to executeResult  DS.B 2 ; Word - error result from ATP operationcompletionPtr  DS.B 4 ; Long - pointer to the completion routinerespSocketID  DS.B 1 ; Byte - response socket #networkID  DS.B 2 ; Word - source network #nodeID  DS.B 1 ; Byte - source node #socketID  DS.B 1 ; Byte - source socket #transactionID  DS.B 2 ; Word - ATP transaction IDreqBuffLen  DS.B 2 ; Word - request buffer lengthreqBuffPtr  DS.B 4 ; Long - pointer to request bufferuserBytes  DS.B 4 ; Long - user BYTEsrequestLen  DS.B 2 ; Word - actual request lengthatpFlags  DS.B 1 ; Byte - ATP operation flagsbitmap  DS.B 1 ; Byte - bitmap for packet receptionreserved  DS.B 4 ; Long - reserved for future use  ENDRSEND_ATP_RESP_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - ATP command to executeResult  DS.B 2 ; Word - result to the ATP operationcompletionPtr  DS.B 4 ; Long - pointer to the completion routinesocketID  DS.B 1 ; Byte - response socket #destNetID  DS.B 2 ; Word - destination network #destNodeID  DS.B 1 ; Byte - destination node #destSocketID  DS.B 1 ; Byte - destination socket #transactionID  DS.B 2 ; Word - transaction ID #numRespBuffers  DS.B 1 ; Byte - number of response bufferstotalPackets  DS.B 1 ; Byte - total ATP packetsrespBDSPtr  DS.B 4 ; Long - pointer to the BDS bufferatpFlags  DS.B 1 ; Byte - ATP operation flagsbitmap  DS.B 1 ; Byte - bitmap for packet receptionaddRoutinePtr  DS.B 4 ; Long - pointer to a routine to call when packets have been releasedstsFlag  DS.B 1 ; Byte - Flag indicating the use of STS servicing  ENDRADD_ATP_RESP_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - ATP command to executeResult  DS.B 2 ; Word - error result to the ATP operationsocketID  DS.B 1 ; Byte - response socket #destNetID  DS.B 2 ; Word - destination network #destNodeID  DS.B 1 ; Byte - destination node #destSocketID  DS.B 1 ; Byte - destination socket #transactionID  DS.B 2 ; Word - ATP transaction ID #respBuffLen  DS.B 2 ; Word - length of the response bufferrespBuffPtr  DS.B 4 ; Long - pointer to the response bufferuserBytes  DS.B 4 ; Long - user BYTEsatpFlags  DS.B 1 ; Byte - ATP operation flag  ENDRREL_ATP_CB_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - ATP command to executeResult  DS.B 2 ; Word - error result to the ATP operationsocketID  DS.B 1 ; Byte - response socket #destNetID  DS.B 2 ; Word - destination network #destNodeID  DS.B 1 ; Byte - destination node #destSocketID  DS.B 1 ; Byte - destination socket #transactionID  DS.B 2 ; Word - ATP transaction ID  ENDRRESPBDSBUFFER RECORD 0 ; AppleTalkBufferLength  DS.B 2 ; Word - BufferPtr  DS.B 4 ; Long - UserBytes  DS.B 4 ; Long - ActualLength  DS.B 2 ; Word -   ENDROPEN_SOCKET_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - DDP command to executeResult  DS.B 2 ; Word - error result from DDP operationsocketNumber  DS.B 1 ; Byte - socket number openedclientAddr  DS.B 4 ; Long - client address  ENDRCLOSE_SOCKET_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - DDP commnd to executeResult  DS.B 2 ; Word - error result from DDP operationsocketNumber  DS.B 1 ; Byte - socket # to close  ENDRSEND_DATAGRAM_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - DDP command to executeResult  DS.B 2 ; Word - error result from DDP operationchecksum  DS.B 1 ; Byte - calculated checksumdestNet  DS.B 2 ; Word - destination network #destNode  DS.B 1 ; Byte - destination node #destSocket  DS.B 1 ; Byte - destination socket #sourceSocket  DS.B 1 ; Byte - DDP socket to send fromddpType  DS.B 1 ; Byte - DDP protocol typeBDSPtr  DS.B 4 ; Long - pointer to the DDP BDS buffer  ENDRLAP_WRITE_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - lap command to executeResult  DS.B 2 ; Word - lap error result codedestNode  DS.B 1 ; Byte - destination node to send packet tolapType  DS.B 1 ; Byte - lap protocol type to sendlapBDSPtr  DS.B 4 ; Long - pointer to the lap BDS buffer  ENDRREAD_BUFFER_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - LAP command to executeResult  DS.B 2 ; Word - error result of the LAP operationrequestCount  DS.B 2 ; Word - how many BYTEs to transferbufferPtr  DS.B 4 ; Long - pointer to a buffer to store infopurge  DS.B 1 ; Byte - flag for purging the buffer if wrong sizeamountTransfered  DS.B 2 ; Word - actual amount transfered  ENDRATTACH_PROT_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - LAP command to executeResult  DS.B 2 ; Word - error result of LAP operationprotType  DS.B 1 ; Byte - protocol type specifing the LAP typeprotAddr  DS.B 4 ; Long - protocol address specifing the LAP handler  ENDRREMOVE_PROT RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - LAP command to executeResult  DS.B 2 ; Word - error result of LAP operationprotType  DS.B 1 ; Byte - protocol type specifing the LAP type  ENDRBDS RECORD 0 ; AppleTalkBufLen  DS.B 2 ; Word - BufPtr  DS.B 4 ; Long -   ENDRREGISTER_NAME_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - NBP command to executeResult  DS.B 2 ; Word - error result from NBP operationcompletionPtr  DS.B 4 ; Long - pointer to the completion routinenamePtr  DS.B 4 ; Long - pointer to the entityTyperinterval  DS.B 1 ; Byte - timeOut period before retryingrcount  DS.B 1 ; Byte - number of retries to attemptreserved  DS.B 2 ; Word - reserved for future usesocketNumber  DS.B 1 ; Byte - socket listner being registeredcheckFlag  DS.B 1 ; Byte - flag for checking duplicate names  ENDRREMOVE_NAME_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - NBP command to executeResult  DS.B 2 ; Word - error result from NBP operationentityPtr  DS.B 4 ; Long - pointer to the entity entityType  ENDRLOOKUP_NAME_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - NBP command to executeResult  DS.B 2 ; Word - error result from NBP operationcompletionPtr  DS.B 4 ; Long - pointer to the completion routineentityPtr  DS.B 4 ; Long - pointer to the entity entityTyperinterval  DS.B 1 ; Byte - timeout interval before retryingrcount  DS.B 1 ; Byte - number of retries to attemptreserved  DS.B 2 ; Word - reserved for future usebufferLength  DS.B 2 ; Word - length of the user bufferbufferPtr  DS.B 4 ; Long - pointer to the user buffermaxMatch  DS.B 1 ; Byte - maxiumn number of name matchesactualMatch  DS.B 1 ; Byte - actual number of matches  ENDRCONFIRM_NAME_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - NBP command to executeResult  DS.B 2 ; Word - error result from NBP operationcompletionPtr  DS.B 4 ; Long - pointer to the completion routineentityPtr  DS.B 4 ; Long - pointer to the entity namerinterval  DS.B 1 ; Byte - timeout interval before retryingrcount  DS.B 1 ; Byte - number of retries to attemptreserved  DS.B 2 ; Word - reserved for future usenetworkID  DS.B 2 ; Word - network number for confirmationnodeID  DS.B 1 ; Byte - node number for confirmationsocketID  DS.B 1 ; Byte - socket number for confirmationactualSocketID  DS.B 1 ; Byte - actual socket number confirmed  ENDRPAP_STATUS_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - PAP command to executeResult  DS.B 2 ; Word - error result from a PAP operationcompletionPtr  DS.B 4 ; Long - pointer to the completion routineprinterNamePtr  DS.B 4 ; Long - pointer to the printer namestatusBuffPtr  DS.B 4 ; Long - pointer to the status buffer  ENDRPAP_OPEN_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - PAP command to executeResult  DS.B 2 ; Word - error result from a PAP operationcompletionPtr  DS.B 4 ; Long - pointer to the completion routinesessRefID  DS.B 1 ; Byte - session reference numberprinterNamePtr  DS.B 4 ; Long - printer name pointerflowQuantum  DS.B 1 ; Byte - number of ATP packets to be sentstatusBuffPtr  DS.B 4 ; Long - pointer to the status buffer  ENDRPAP_CLOSE_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - PAP command to executeResult  DS.B 2 ; Word - error result from a PAP operationcompletionPtr  DS.B 4 ; Long - pointer to the completion routinesessRefID  DS.B 1 ; Byte - session referance number  ENDRPAP_READ_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - PAP command to executeResult  DS.B 2 ; Word - error result from a PAP operationcompletionPtr  DS.B 4 ; Long - pointer to the completion routinesessRefID  DS.B 1 ; Byte - session reference #buffLength  DS.B 2 ; Word - length of the user bufferbuffPtr  DS.B 4 ; Long - pointer to the user bufferpapEOF  DS.B 1 ; Byte - end of file flag  ENDRPAP_WRITE_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - PAP command to executeResult  DS.B 2 ; Word - error result from a PAP operationcompletionPtr  DS.B 4 ; Long - pointer to the completion routinesessRefID  DS.B 1 ; Byte - session reference #dataLength  DS.B 2 ; Word - data lengthbuffPtr  DS.B 4 ; Long - pointer to the bufferpapEOF  DS.B 1 ; Byte - end of file flag  ENDRPAP_UNLOAD_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - PAP command to executeResult  DS.B 2 ; Word - error result from a PAP operationcompletionPtr  DS.B 4 ; Long - pointer to the completion routine  ENDRFI_USER_PREFIX_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - PFI command to executeResult  DS.B 2 ; Word - error result from PFI operationDirectionFlag  DS.B 1 ; Byte - high bit set to point to by User Pointer is stored in PFIUserNamePtr  DS.B 2 ; Word - name pointed to my User Mane Pointer  ENDRFI_LOGIN_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - PFI command to executeResult  DS.B 2 ; Word - error result from PFI operationnetworkID  DS.B 2 ; Word - network number for confirmationnodeID  DS.B 1 ; Byte - node number for confirmationsocketID  DS.B 1 ; Byte - socket number for confirmationcmdbufferLength  DS.B 2 ; Word - length of the user command buffercmdbufferPtr  DS.B 4 ; Long - pointer to the user command bufferrplybufferLength  DS.B 2 ; Word - length of the reply bufferrplybufferPtr  DS.B 4 ; Long - pointer to the reply buffersessRefID  DS.B 1 ; Byte - session reference numberAttnRtnAddr  DS.B 4 ; Long -   ENDRFI_LOGIN_CONT_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - PFI command to executeResult  DS.B 2 ; Word - error result from PFI operationsessRefID  DS.B 1 ; Byte - session reference numbercmdbufferLength  DS.B 2 ; Word - length of the user command buffercmdbufferPtr  DS.B 4 ; Long - pointer to the user command bufferrplybufferLength  DS.B 2 ; Word - length of the reply bufferrplybufferPtr  DS.B 4 ; Long - pointer to the reply buffer  ENDRFI_LOGOUT_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - PFI command to executeResult  DS.B 2 ; Word - error result from PFI operationsessRefID  DS.B 1 ; Byte - session reference number  ENDRFI_MOUNTVOL_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - PFI command to executeResult  DS.B 2 ; Word - error result from PFI operationsessRefID  DS.B 1 ; Byte - session reference numbermountflag  DS.B 1 ; Byte - mount flag field specifies whether the vol is to be mountedvolNamePtr  DS.B 4 ; Long - pointer to the volume that will be pseudo-mountedvolID  DS.B 2 ; Word - volume ID returned by AFPslotDrive  DS.B 1 ; Byte - the slot/drive in ProDOS format into which the volume was pseudo-mountedpasswordPtr  DS.B 4 ; Long - pointer to password for the pseudo-mounted volume  ENDRFI_LIST_SESSIONS_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - PFI command to executeResult  DS.B 2 ; Word - error result from PFI operationbuffLength  DS.B 2 ; Word - length of the user bufferbuffPtr  DS.B 4 ; Long - pointer to the user bufferentriesRtn  DS.B 1 ; Byte - contains the number of entries returned from the list of current sessions */ being maintained through the PFI and any volumes mounted for those sessions  ENDRFI_TIME_ZONE_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - PFI command to executeResult  DS.B 2 ; Word - error result from PFI operationtimeFlag  DS.B 1 ; Byte - depending on bit set of the time falg field indicates whether the time should be added to or subtracted from the time zone selected  ENDRFI_GET_SRCPATH_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - PFI command to executeResult  DS.B 2 ; Word - error result from PFI operationbuffPtr  DS.B 4 ; Long - pointer to the user buffer where the pathname will be placed  ENDRFI_ACCESS_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - PFI command to executeResult  DS.B 2 ; Word - error result from PFI operationdirectionalFlag  DS.B 1 ; Byte - if bit 7 of the directional flag is set, the access is being setaccessRights  DS.B 4 ; Long - access rights in AFP formatpathnamePtr  DS.B 4 ; Long - pointer the path name containing that volumecreatorNamePtr  DS.B 4 ; Long - if bit 6 of the directional flag is set, the creator's name will be dealt withgroupNamePtr  DS.B 4 ; Long - if bit 5 of the directional flag is set, the group name will be dealt with  ENDRFI_NAMING_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - PFI command to executeResult  DS.B 2 ; Word - error result from PFI operationdirectionalFlag  DS.B 1 ; Byte - if bit 7 of the directional flag is set, the naming convention is being setnamingconvFlag  DS.B 1 ; Byte - if bit 7 of the naming convention flag is set, the naming convention becomes AFP format  ENDRCONVERT_TIME_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - PFI command to executeResult  DS.B 2 ; Word - error result from PFI operationformatFlag  DS.B 1 ; Byte - if the format flag is set to 0, then from date time is AFP format  if the format flag is set to 1, then from date time is ProDOS formatfromDateTime  DS.B 4 ; Long - this field contains the From DATE/Time data (values) to convert, not pointerstoDateTime  DS.B 4 ; Long - this field contains the TO DATE/Time data (values) to convert, not pointers  ENDRFI_SET_BUFFER_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - PFI command to executeResult  DS.B 2 ; Word - error result from PFI operationDirFlag  DS.B 1 ; Byte - $00 or $80BufLen  DS.B 2 ; Word - Buffer LengthBufPtr  DS.B 4 ; Long - if the format flag is set to 0, then from date time is AFP format  ENDRLIST_SESSIONS_BUFFER RECORD 0 ; AppleTalkRefNum  DS.B 1 ; Byte - SlotDrive  DS.B 1 ; Byte - VolName  DS.B 28 ; char[28] - VolID  DS.B 2 ; Word -   ENDRPM_SET_PRINTER_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - PM command to executeResult  DS.B 2 ; Word - error code returned from a PM operationentityPtr  DS.B 4 ; Long - pointer to the entity namePMFlags  DS.B 1 ; Byte - PM operation flagsflushInterval  DS.B 2 ; Word - flush intervaltimeOut  DS.B 2 ; Word - timeOutnumberbuff  DS.B 2 ; Word - nubmer of buffers allocated  ENDRGET_MY_ZONE_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - ZIP Command to executeResult  DS.B 2 ; Word - error result from a ZIP operationcompletionPtr  DS.B 4 ; Long - Pointer to the completion routinebuffPtr  DS.B 4 ; Long - pointe to the buffertimeOut  DS.B 1 ; Byte - timeout interval for retryingretry  DS.B 1 ; Byte - number of retries to attemptreserved  DS.B 2 ; Word - reserved for future use  ENDRGET_ZONE_LIST_PARAM RECORD 0 ; AppleTalkasync  DS.B 1 ; Byte - asyncronous flagCommand  DS.B 1 ; Byte - ZIP command to executeResult  DS.B 2 ; Word - error result from a ZIP operationcompletionPtr  DS.B 4 ; Long - pointer to the completion routinebuffLength  DS.B 2 ; Word - length of the user bufferbuffPtr  DS.B 4 ; Long - pointer to the user bufferbridgeNodeID  DS.B 1 ; Byte - bridge node numberstartIndex  DS.B 2 ; Word - starting index of the buffertimeOut  DS.B 1 ; Byte - timeout interval for retryingretry  DS.B 1 ; Byte - number of retries to attemptzonesFound  DS.B 2 ; Word - number of zones foundreserved  DS.B 2 ; Word - reserved for future use (not clear in manual)  ENDRCMD_BLOCK RECORD 0 ; AppleTalkCmdLen  DS.B 2 ; Word - AFP Command LengthCmdBlkAddr  DS.B 4 ; Pointer - Address of AFP CommandReplyLen  DS.B 2 ; Word - Size of Reply BufferReplyBuf  DS.B 4 ; Pointer - Address of Reply BufferWriteLen  DS.B 2 ; Word - Size of Data to be writtenWriteBuf  DS.B 4 ; Pointer - Address of Write Buffer  ENDR; File:  E16.ACE;;; Copyright Apple computer, Inc. 1986-89; All Rights Reserved;;aceNoError EQU $0aceIsActive EQU $1D01aceBadDP EQU $1D02aceNotActive EQU $1D03 ; Error -  aceNoSuchParam EQU $1D04aceBadMethod EQU $1D05aceBadSrc EQU $1D06aceBadDest EQU $1D07aceDatatOverlap EQU $1D08aceNotImplemented EQU $1DFF; File:  E16.ADB;;; Copyright Apple computer, Inc. 1986-89; All Rights Reserved;;cmndIncomplete EQU $0910 ; error - Command not completed.cantSync EQU $0911 ; error - Can't synchronizeadbBusy EQU $0982 ; error - Busy  (command pending)devNotAtAddr EQU $0983 ; error - Device not present at addresssrqListFull EQU $0984 ; error - List fullreadModes EQU $000AreadConfig EQU $000BreadADBError EQU $000CreadVersionNum EQU $000DreadAvailCharSet EQU $000EreadAvailLayout EQU $000FreadMicroMem EQU $0009ADBabort EQU $0001 ; SendInfo - commandresetKbd EQU $0002 ; SendInfo - commandflushKbd EQU $0003 ; SendInfo - commandsetModes EQU $0004 ; SendInfo - 2nd param is pointer to mode byteclearModes EQU $0005 ; SendInfo - 2nd param is pointer to mode BytesetConfig EQU $0006 ; SendInfo - 2nd param is pointer to SetConfigRecsynch EQU $0007 ; SendInfo - 2nd param is pointer to SynchRecwriteMicroMem EQU $0008 ; SendInfo - 2nd param is pointer to MicroControlMemRecresetSys EQU $0010 ; SendInfo - commandkeyCode EQU $0011 ; SendInfo - 2nd param is pointer to key code byte.resetADB EQU $0040 ; SendInfo - commandtransmitADBBytes EQU $0047 ; SendInfo - add number of bytes to this enableSRQ EQU $0050 ; SendInfo - command - ADB address in low nibbleflushADBDevBuf EQU $0060 ; SendInfo - command - ADB address in low nibbledisableSRQ EQU $0070 ; SendInfo - command - ADB address in low nibbletransmit2ADBBytes EQU $0080 ; SendInfo - add ADB address to thislisten EQU $0080 ; SendInfo - adbCommand = listen + ( 16 * reg) + (adb address)talk EQU $00C0 ; SendInfo - adbCommand = talk + ( 16 * reg) + (adb address); offset constants for ReadConfigRecorcRepeatDelay EQU 0orcLayoutOrLang EQU 1orcADBAddr EQU 2; offset constants for SetConfigRecoscADBAddr EQU 0oscLayoutOrLang EQU 1oscRepeatDelay EQU 2; offset constants for SynchRecosynchMode EQU 0osynchKybdMouseAddr EQU 1osynchLayoutOrLang EQU 2osynchRepeatDelay EQU 3; offset constants for ScaleRecoxDivide EQU 0oyDivide EQU 2oxOffset EQU 4oyOffset EQU 6oxMultiply EQU 8oyMultiply EQU 10; File:  E16.AppleTalk;;; Copyright Apple computer, Inc. 1986-89; All Rights Reserved;;atGetInfoCommand EQU $02atGetGlobalCommand EQU $03atInstallTimerCommand EQU $04atRemoveTimerCommand EQU $05atBootCommand EQU $06atLapWriteCommand EQU $07atReadBufferCommand EQU $08atAttachProtCommand EQU $09atRemoveProtCommand EQU $0aatOpenSocketCommand EQU $0batCloseSocketCommand EQU $0catSendDatagramCommand EQU $0datRegisterNameCommand EQU $0eatRemoveNameCommand EQU $0fatLookupNameCommand EQU $10atConfirmNameCommand EQU $11atSendATPReqCommand EQU $12atCancelATPReqCommand EQU $13atOpenATPSocketCommand EQU $14atCloseATPSocketCommand EQU $15atGetATPReqCommand EQU $16atSendATPRespCommand EQU $17atAddATPRespCommand EQU $18atRelATPCBCommand EQU $19atGetMyZoneCommand EQU $1aatGetZoneListCommand EQU $1batSPGetParmsCommand EQU $1catSPGetStatusCommand EQU $1datSPOpenSessionCommand EQU $1eatSPCloseSessionCommand EQU $1fatSPCommandCommand EQU $20atSPWriteCommand EQU $21atPAPStatusCommand EQU $22atPAPOpenCommand EQU $23atPAPCloseCommand EQU $24atPAPReadCommand EQU $25atPAPWriteCommand EQU $26atPAPUnloadCommand EQU $27atPMSetPrinterCommand EQU $28atFIUserPrefixCommand EQU $2aatFILoginCommand EQU $2batFILoginContCommand EQU $2catFILogOutCommand EQU $2datFIMountVolCommand EQU $2eatFIListSessionsCommand EQU $2fatFITimeZoneCommand EQU $30atFIGetSrcPathCommand EQU $31atFIAccessCommand EQU $32atFINamingCommand EQU $33atConvertTimeCommand EQU $34atFISetBufferCommand EQU $36atinvalidCmdErr EQU $101 ; Error - Invalid commandatmemoryErr EQU $102 ; Error - Heap/memory management errorattimerErr EQU $103 ; Error - No timer installed erroratsyncErr EQU $104 ; Error - Syncronous only callattooManyTimes EQU $105 ; Error - Too many timesatlapNoPacketErr EQU $201 ; LAP Error - No packet in bufferatlapEOBErr EQU $202 ; LAP Error - End of bufferatlapLenErr EQU $203 ; LAP Error - LAP data too largeatlapFailedErr EQU $204 ; LAP Error - Retry count exhaustedatlapTypeErr EQU $205 ; LAP Error - Illegal LAP typeatlapDuplicateErr EQU $206 ; LAP Error - Duplicate LAP typeatlapProtocolErr EQU $207 ; LAP Error - Too many protocolsatlapTypeFoundErr EQU $208 ; LAP Error - Type not foundatlapDataLostErr EQU $209 ; LAP Error - Data lost in PurgeatddpSktNumErr EQU $301 ; DDP Error - Too many sockets openatddpSktErr EQU $302 ; DDP Error - Socket not openatddpSktOpenErr EQU $303 ; DDP Error - Socket already openatddpSktTypeErr EQU $304 ; DDP Error - Invalid Socket TypeatddpLenErr EQU $305 ; DDP Error - DDP length erroratddpBridgeErr EQU $306 ; DDP Error - No bridge availableatnbpNameNumberErr EQU $401 ; NBP Error - Too many namesatnbpNameExistErr EQU $402 ; NBP Error - Name already existsatnbpNameFoundErr EQU $403 ; NBP Error - Name not foundatnbpBufferErr EQU $404 ; NBP Error - User buffer fullatnbpWildcardErr EQU $405 ; NBP Error - Wildcard not allowedatnbpNameErr EQU $406 ; NBP Error - Invalid name formatatnbpAddressErr EQU $407 ; NBP Error - Incorrect addressatnbpProcessErr EQU $408 ; NBP Error - Too many NBP processesatatpDataLenErr EQU $501 ; ATP Error - ATP data too largeatatpSocketErr EQU $502 ; ATP Error - Invalid ATP socketatatpControlBlkErr EQU $503 ; ATP Error - ATP control block not foundatatpProcessErr EQU $504 ; ATP Error - Too many active ATP callsatatpReleaseErr EQU $505 ; ATP Error - No release receivedatatpNoRespActive EQU $506 ; ATP Error - No response activeatatpRespErr EQU $507 ; ATP Error - No send response activeatatpReqErr EQU $508 ; ATP Error - ATP send request abortedatatpSktClosedErr EQU $509 ; ATP Error - socket closed erroratatpTooManySkts EQU $50A ; ATP Error - Too many ATP socketsatatpTooManyResp EQU $50B ; ATP Error - Too many responses expectedatatpDDPSktErr EQU $50C ; ATP Error - Unable to open DDP socketatatpSndRespRelErr EQU $50D ; ATP Error - ATP Send Response was releasedatzipNetworkErr EQU $601 ; ZIP Error - Network erroratzipOverflow EQU $602 ; ZIP Error - ZIP overflowatzipNotFound EQU $603 ; ZIP Error - ZIP not foundataspNetworkErr EQU $701 ; ASP Error - Network errorataspSessNumErr EQU $702 ; ASP Error - Too many sessionsataspRefErr EQU $703 ; ASP Error - Invalid reference numberataspSizeErr EQU $704 ; ASP Error - Size errorataspBufErr EQU $705 ; ASP Error - Buffer errorataspNoRespErr EQU $706 ; ASP Error - No response from serverataspBadVersion EQU $707 ; ASP Error - Bad version numberataspTooManySessions EQU $708 ; ASP Error - Too many sessionsataspServBusyErr EQU $709 ; ASP Error - Server busyataspSessionClosed EQU $70A ; ASP Error - Session closedatpapSessNumErr EQU $801 ; PAP error - Too many sessionsatpapRefErr EQU $802 ; PAP error - Invalid ReferenceatpapQuantumErr EQU $803 ; PAP error - Quantum ErroratpapCommandErr EQU $804 ; PAP error - Too many commandsatpapNameErr EQU $805 ; PAP error - Name not foundatpapSessionErr EQU $806 ; PAP error - Session closedatpapNetworkErr EQU $807 ; PAP error - Network erroratpapServRespErr EQU $808 ; PAP error - Server not respondingatpapServBusyErr EQU $809 ; PAP error - Server busyatpapBuffSizeErr EQU $80A ; PAP error - Buffer size erroratpapInUseErr EQU $80B ; PAP error - PAP in useatpfiTooManySessErr EQU $A01 ; PFI error - Too many sessionsatpfiUnableOpenSessErr EQU $A02 ; PFI error - Unable to open sessionatpfiNoRespFrmSrvrErr EQU $A03 ; PFI error - No response from serveratpfiLoginContErr EQU $A04 ; PFI error - Login continueatpfiInvalidNameErr EQU $A05 ; PFI error - Invalid nameatpfiInvalidSessNumErr EQU $A06 ; PFI error - Invalid Sess reference # or unknown volumeatpfiUnableOpenVolErr EQU $A07 ; PFI error - Unable to open volumeatpfiTooManyVolsOpenErr EQU $A08 ; PFI error - Too many mounted volumesatpfiVolNotMountedErr EQU $A09 ; PFI error - Volume Not MountedatpfiBufferToSmallErr EQU $A0B ; PFI error - Buffer to smallatpfiTimeFlagErr EQU $A0C ; PFI error - Time flag erroratpfiUnableTSetGroupErr EQU $A0D ; PFI error - Unable to set creatoratpfiDirNotFoundErr EQU $A0E ; PFI error - Directory not foundatpfiAccessDeniedErr EQU $A0F ; PFI error - Access deniedatpfiMiscellaneousErr EQU $A10 ; PFI error - Miscellaneous erroratpfiVolAlreadyMntedErr EQU $A11 ; PFI error - Volume already mountedatpfiUnableGetCrtrErr EQU $A12 ; PFI error - Unable to get creatoratpfiAlrdyLggedOnSrvrErr EQU $A13 ; PFI error - Already logged onto serveratpfiTimeError EQU $A14 ; PFI error - Time erroratpfiUserNotAuthorizedErr EQU $A15 ; PFI error - User not authorizedatpfiParamterErr EQU $A16 ; PFI error - Parameter erroratpfiSrvrGoingDownErr EQU $A17 ; PFI error - Server going downatpfiBadUAMErr EQU $A18 ; PFI error - Bad UAMatpfiBadVersionNumErr EQU $A19 ; PFI error - Bad version number; File:  E16.Control;;; Copyright Apple computer, Inc. 1986-89; All Rights Reserved;;wmNotStartedUp EQU $1001 ; error - Window manager was not started first.noConstraint EQU $0000 ; Axis Parameter - No constraint on movement.hAxisOnly EQU $0001 ; Axis Parameter - Horizontal axis only.vAxisOnly EQU $0002 ; Axis Parameter - Vertical axis only.simpRound EQU $0000 ; CtlFlag - Simple button flagupFlag EQU $0001 ; CtlFlag - Scroll bar flag. boldButton EQU $0001 ; CtlFlag - Bold round cornered outlined button.simpBRound EQU $0001 ; CtlFlag - Simple button flagdownFlag EQU $0002 ; CtlFlag - Scroll bar flag.simpSquare EQU $0002 ; CtlFlag - Simple button flagsimpDropSquare EQU $0003 ; CtlFlag - Simple button flagleftFlag EQU $0004 ; CtlFlag - Scroll bar flag.rightFlag EQU $0008 ; CtlFlag - Scroll bar flag.dirScroll EQU $0010 ; CtlFlag - Scroll bar flag.horScroll EQU $0010 ; CtlFlag - Scroll bar flag.family EQU $007F ; CtlFlag - Mask for radio button family numberctlInVis EQU $0080 ; CtlFlag - invisible mask for any type of control inListBox EQU $88simpleProc EQU $00000000checkProc EQU $02000000radioProc EQU $04000000scrollProc EQU $06000000growProc EQU $08000000drawCtl EQU $0000 ; DefProc - Draw control command.calcCRect EQU $0001 ; DefProc - Compute drag RECT command.testCtl EQU $0002 ; DefProc - Hit test command.initCtl EQU $0003 ; DefProc - Initialize command.dispCtl EQU $0004 ; DefProc - Dispose command.posCtl EQU $0005 ; DefProc - Move indicator command.thumbCtl EQU $0006 ; DefProc - Compute drag parameters command.dragCtl EQU $0007 ; DefProc - Drag command.autoTrack EQU $0008 ; DefProc - Action command.newValue EQU $0009 ; DefProc - Set new value command.setParams EQU $000A ; DefProc - Set new parameters command.moveCtl EQU $000B ; DefProc - Move command.recSize EQU $000C ; DefProc - Return record size command.noHilite EQU $0000 ; hiliteState - Param to HiliteControlinactiveHilite EQU $00FF ; hiliteState - Param to HiliteControlnoPart EQU $0000simpleButton EQU $0002checkBox EQU $0003radioButton EQU $0004upArrow EQU $0005downArrow EQU $0006pageUp EQU $0007pageDown EQU $0008growBox EQU $000Athumb EQU $0081fCtlTarget EQU $8000 ; CtlRec.ctlMoreFlags - is current target of typing commandsfCtlCanBeTarget EQU $4000 ; CtlRec.ctlMoreFlags - can be made the target controlfCtlWantEvents EQU $2000 ; CtlRec.ctlMoreFlags - control can be called view SendEventToCtlfCtlProcRefNotPtr EQU $1000 ; CtlRec.ctlMoreFlags - set = ID of defproc, clear = pointer to defprocfCtlTellAboutSize EQU $0800 ; CtlRec.ctlMoreFlags - set if ctl needs notification when size of owning window changesfCtlIsMultiPar EQU $0400 ; CtlRec.ctlMoreFlags - set if ctl needs notification to be hiddentitleIsPtr EQU $00titleIsHandle EQU $01titleIsResource EQU $02colorTableIsPtr EQU $00colorTableIsHandle EQU $04colorTableIsResource EQU $08ctlHandleEvent EQU $0DctlChangeTarget EQU $0EctlChangeBounds EQU $0FctlWindChangeSize EQU $10ctlHandleTab EQU $11ctlHideCtl EQU $12singlePtr EQU $0000singleHandle EQU $0001singleResource EQU $0002ptrToPtr EQU $0003ptrToHandle EQU $0004ptrToResource EQU $0005handleToPtr EQU $0006handleToHandle EQU $0007handleToResource EQU $0008resourceToResource EQU $0009simpleButtonControl EQU $80000000checkControl EQU $82000000radioControl EQU $84000000scrollBarControl EQU $86000000growControl EQU $88000000statTextControl EQU $81000000editLineControl EQU $83000000editTextControl EQU $85000000popUpControl EQU $87000000listControl EQU $89000000iconButtonControl EQU $07FF0001pictureControl EQU $8D000000noCtlError EQU $1004 ; Error - no controls in windownoSuperCtlError EQU $1005 ; Error - no super controls in windownoCtlTargetError EQU $1006 ; Error - no target super controlnotSuperCtlError EQU $1007 ; Error - action can only be done on super controlcanNotBeTargetError EQU $1008 ; Error - conrol cannot be made targetnoSuchIDError EQU $1009 ; Error - specified ID cannot be foundtooFewParmsError EQU $100A ; Error - not enough params specifiednoCtlToBeTargetError EQU $100B ; Error - NextCtl call, no ctl could be targetnoWind_Err EQU $100C ; Error - there is no front window; offset constants for BarColorsobarOutline EQU 0obarNorArrow EQU 2obarSelArrow EQU 4obarArrowBack EQU 6obarNorThumb EQU 8obarSelThumb EQU 10obarPageRgn EQU 12obarInactive EQU 14; offset constants for BoxColorsoboxReserved EQU 0oboxNor EQU 2oboxSel EQU 4oboxTitle EQU 6; offset constants for BttnColorsobttnOutline EQU 0obttnNorBack EQU 2obttnSelBack EQU 4obttnNorText EQU 6obttnSelText EQU 8; offset constants for CtlRecoctlNext EQU 0octlOwner EQU 4octlRect EQU 8octlFlag EQU 16octlHilite EQU 17octlValue EQU 18octlProc EQU 20octlAction EQU 24octlData EQU 28octlRefCon EQU 32octlColor EQU 36octlReserved EQU 40octlID EQU 56octlMoreFlags EQU 60octlVersion EQU 62; offset constants for LimitBlkoboundRect EQU 0oslopRect EQU 8oaxisParam EQU 16odragPatt EQU 18; offset constants for RadioColorsoradReserved EQU 0oradNor EQU 2oradSel EQU 4oradTitle EQU 6; File:  E16.Desk;;; Copyright Apple computer, Inc. 1986-89; All Rights Reserved;;daNotFound EQU $0510 ; error - desk accessory not foundnotSysWindow EQU $0511 ; error - not the system windoweventAction EQU $0001runAction EQU $0002undoAction EQU $0005cutAction EQU $0006copyAction EQU $0007pasteAction EQU $0008clearAction EQU $0009cursorAction EQU $0003undo EQU $0001 ; System Edit - edit typecut EQU $0002 ; System Edit - edit typecopy EQU $0003 ; System Edit - edit typepaste EQU $0004 ; System Edit - edit typeclear EQU $0005 ; System Edit - edit type; File:  E16.Dialog;;; Copyright Apple computer, Inc. 1986-89; All Rights Reserved;;badItemType EQU $150AnewItemFailed EQU $150BitemNotFound EQU $150CnotModalDialog EQU $150DgetInitView EQU $0001getInitTotal EQU $0002getInitValue EQU $0003scrollLineUp EQU $0004scrollLineDown EQU $0005scrollPageUp EQU $0006scrollPageDown EQU $0007scrollThumb EQU $0008buttonItem EQU $000AcheckItem EQU $000BradioItem EQU $000CscrollBarItem EQU $000DuserCtlItem EQU $000EstatText EQU $000FlongStatText EQU $0010editLine EQU $0011iconItem EQU $0012picItem EQU $0013userItem EQU $0014userCtlItem2 EQU $0015longStatText2 EQU $0016itemDisable EQU $8000minItemType EQU $000AmaxItemType EQU $0016ok EQU $0001cancel EQU $0002inButton EQU $0002 ; ModalDialog2 - Part codeinCheckBox EQU $0003 ; ModalDialog2 - Part codeinRadioButton EQU $0004 ; ModalDialog2 - Part codeinUpArrow EQU $0005 ; ModalDialog2 - Part codeinDownArrow EQU $0006 ; ModalDialog2 - Part codeinPageUp EQU $0007 ; ModalDialog2 - Part codeinPageDown EQU $0008 ; ModalDialog2 - Part codeinStatText EQU $0009 ; ModalDialog2 - Part codeinGrow EQU $000A ; ModalDialog2 - Part codeinEditLine EQU $000B ; ModalDialog2 - Part codeinUserItem EQU $000C ; ModalDialog2 - Part codeinLongStatText EQU $000D ; ModalDialog2 - Part codeinIconItem EQU $000E ; ModalDialog2 - Part codeinLongStatText2 EQU $000FinThumb EQU $0081 ; ModalDialog2 - Part codeokDefault EQU $0000cancelDefault EQU $0040alertDrawn EQU $0080; offset constants for ItemTemplateoitemID EQU 0oitemRect EQU 2oitemType EQU 10oitemDescr EQU 12oitemValue EQU 16oitemFlag EQU 18oitemColor EQU 20; offset constants for AlertTemplateoatBoundsRect EQU 0oatAlertID EQU 8oatStage1 EQU 10oatStage2 EQU 11oatStage3 EQU 12oatStage4 EQU 13oatItemList EQU 14; offset constants for DialogTemplateodtBoundsRect EQU 0odtVisible EQU 8odtRefCon EQU 10odtItemList EQU 14; offset constants for IconRecordoiconRect EQU 0oiconImage EQU 8; offset constants for UserCtlItemPBodefProcParm EQU 0otitleParm EQU 4oparam2 EQU 8oparam1 EQU 10; File:  E16.Event;;; Copyright Apple computer, Inc. 1986-89; All Rights Reserved;;emDupStrtUpErr EQU $0601 ; error - duplicate EMStartup CallemResetErr EQU $0602 ; error - can't reset error the Event ManageremNotActErr EQU $0603 ; error - event manager not activeemBadEvtCodeErr EQU $0604 ; error - illegal event codeemBadBttnNoErr EQU $0605 ; error - illegal button numberemQSiz2LrgErr EQU $0606 ; error - queue size too largeemNoMemQueueErr EQU $0607 ; error - not enough memory for queueemBadEvtQErr EQU $0681 ; error - fatal sys error - event queue damagedemBadQHndlErr EQU $0682 ; error - fatal sys error - queue handle damagednullEvt EQU $0000mouseDownEvt EQU $0001mouseUpEvt EQU $0002keyDownEvt EQU $0003autoKeyEvt EQU $0005updateEvt EQU $0006activateEvt EQU $0008switchEvt EQU $0009deskAccEvt EQU $000AdriverEvt EQU $000Bapp1Evt EQU $000Capp2Evt EQU $000Dapp3Evt EQU $000Eapp4Evt EQU $000FmDownMask EQU $0002mUpMask EQU $0004keyDownMask EQU $0008autoKeyMask EQU $0020updateMask EQU $0040activeMask EQU $0100switchMask EQU $0200deskAccMask EQU $0400driverMask EQU $0800app1Mask EQU $1000app2Mask EQU $2000app3Mask EQU $4000app4Mask EQU $8000everyEvent EQU $FFFFjcTickCount EQU $00 ; Journal Code - TickCount calljcGetMouse EQU $01 ; Journal Code - GetMouse calljcButton EQU $02 ; Journal Code - Button calljcEvent EQU $04 ; Journal Code - GetNextEvent and EventAvail callsactiveFlag EQU $0001 ; Modifier Flags - set if window being activatedchangeFlag EQU $0002 ; Modifier Flags - set if active wind. changed statebtn1State EQU $0040 ; Modifier Flags - set if button 1 upbtn0State EQU $0080 ; Modifier Flags - set if button 0 upappleKey EQU $0100 ; Modifier Flags - set if Apple key downshiftKey EQU $0200 ; Modifier Flags - set if shift key downcapsLock EQU $0400 ; Modifier Flags - set if caps lock key downoptionKey EQU $0800 ; Modifier Flags - set if option key downcontrolKey EQU $1000 ; Modifier Flags - set if Control key downkeyPad EQU $2000 ; Modifier Flags - set if keypress from key pad; offset constants for EventRecordowhat EQU 0omessage EQU 2owhen EQU 6owhere EQU 10omodifiers EQU 14owmTaskData EQU 16owmTaskMask EQU 20owmLastClickTick EQU 24owmClickCount EQU 28owmTaskData2 EQU 30owmTaskData3 EQU 34owmTaskData4 EQU 38owmLastClickPt EQU 42; File:  E16.Font;;; Copyright Apple computer, Inc. 1986-89; All Rights Reserved;;fmDupStartUpErr EQU $1B01 ; error - duplicate FMStartUp callfmResetErr EQU $1B02 ; error - can't reset the Font ManagerfmNotActiveErr EQU $1B03 ; error - Font Manager not activefmFamNotFndErr EQU $1B04 ; error - family not foundfmFontNtFndErr EQU $1B05 ; error - font not foundfmFontMemErr EQU $1B06 ; error - font not in memoryfmSysFontErr EQU $1B07 ; error - system font cannot be purgeablefmBadFamNumErr EQU $1B08 ; error - illegal family numberfmBadSizeErr EQU $1B09 ; error - illegal sizefmBadNameErr EQU $1B0A ; error - illegal name lengthfmMenuErr EQU $1B0B ; error - fix font menu never calledfmScaleSizeErr EQU $1B0C ; error - scaled size of font exeeds limitsnewYork EQU $0002geneva EQU $0003monaco EQU $0004venice EQU $0005london EQU $0006athens EQU $0007sanFran EQU $0008toronto EQU $0009cairo EQU $000BlosAngeles EQU $000Ctimes EQU $0014helvetica EQU $0015courier EQU $0016symbol EQU $0017taliesin EQU $0018shaston EQU $FFFEbaseOnlyBit EQU $0020notBaseBit EQU $0020memOnlyBit EQU $0001realOnlyBit EQU $0002anyFamBit EQU $0004anyStyleBit EQU $0008anySizeBit EQU $0010memBit EQU $0001unrealBit EQU $0002apFamBit EQU $0004apVarBit EQU $0008purgeBit EQU $0010notDiskBit EQU $0020notFoundBit EQU $8000dontScaleBit EQU $0001; offset constants for FontStatRecoresultID EQU 0oresultStats EQU 4; File:  E16.GSOS;;; Copyright Apple computer, Inc. 1986-89; All Rights Reserved;;readEnable EQU $0001 ; access - read enable bit: CreateRec, OpenRec access and requestAccess fieldswriteEnable EQU $0002 ; access - write enable bit: CreateRec, OpenRec access and requestAccess fieldsfileInvisible EQU $0004 ; access - Invisible bitbackupNeeded EQU $0020 ; access - backup needed bit: CreateRec, OpenRec access  field. (Must be 0 in requestAccess field )renameEnable EQU $0040 ; access - rename enable bit: CreateRec, OpenRec access and requestAccess fieldsdestroyEnable EQU $0080 ; access - destroy enable  bit: CreateRec, OpenRec access and requestAccess fieldsstartPlus EQU $0000 ; base - > setMark = displacementeofMinus EQU $0001 ; base - > setMark = eof - displacementmarkPlus EQU $0002 ; base - > setMark = mark + displacementmarkMinus EQU $0003 ; base - > setMark = mark - displacementcacheOff EQU $0000 ; cachePriority - do not cache blocks invloved in this readcacheOn EQU $0001 ; cachePriority -  cache blocks invloved in this read if possiblebadSystemCall EQU $0001 ; error - bad system call numberinvalidPcount EQU $0004 ; error - invalid parameter countgsosActive EQU $07 ; error - GS/OS already active    IF &FINDSYM(&SYSGLOBAL,'DEVNOTFOUND')=0 AND &FINDSYM(&SYSGLOBAL,'devnotfound')=0 THEN ; error - device not founddevNotFound EQU $10    ENDIFinvalidDevNum EQU $11 ; error - invalid device numberdrvrBadReq EQU $20 ; error - bad request or commanddrvrBadCode EQU $0021 ; error - bad control or status codedrvrBadParm EQU $0022 ; error - bad call parameterdrvrNotOpen EQU $0023 ; error - character device not opendrvrPriorOpen EQU $0024 ; error - character device already openirqTableFull EQU $0025 ; error - interrupt table fulldrvrNoResrc EQU $0026 ; error - resources not availabledrvrIOError EQU $0027 ; error - I/O errordrvrNoDevice EQU $0028 ; error - device not connecteddrvrBusy EQU $0029 ; error - call aborted, driver is busydrvrWrtProt EQU $002B ; error - device is write protecteddrvrBadCount EQU $002C ; error - invalid byte countdrvrBadBlock EQU $002D ; error - invalid block addressdrvrDiskSwitch EQU $002E ; error - disk has been switcheddrvrOffLine EQU $002F ; error - device off line/ no media presentbadPathSyntax EQU $0040 ; error - invalid pathname syntaxinvalidRefNum EQU $0043 ; error - invalid reference number    IF &FINDSYM(&SYSGLOBAL,'PATHNOTFOUND')=0 AND &FINDSYM(&SYSGLOBAL,'pathnotfound')=0 THEN ; error - subdirectory does not existpathNotFound EQU $44    ENDIFvolNotFound EQU $0045 ; error - volume not found    IF &FINDSYM(&SYSGLOBAL,'FILENOTFOUND')=0 AND &FINDSYM(&SYSGLOBAL,'filenotfound')=0 THEN ; error - file not foundfileNotFound EQU $0046    ENDIFdupPathname EQU $0047 ; error - create or rename with existing namevolumeFull EQU $0048 ; error - volume full errorvolDirFull EQU $0049 ; error - volume directory fullbadFileFormat EQU $004A ; error - version error (incompatible file format)    IF &FINDSYM(&SYSGLOBAL,'BADSTORETYPE')=0 AND &FINDSYM(&SYSGLOBAL,'badstoretype')=0 THEN ; error - unsupported (or incorrect) storage typebadStoreType EQU $004B    ENDIF    IF &FINDSYM(&SYSGLOBAL,'EOFENCOUNTERED')=0 AND &FINDSYM(&SYSGLOBAL,'eofencountered')=0 THEN ; error - end-of-file encounteredeofEncountered EQU $004C    ENDIFoutOfRange EQU $004D ; error - position out of rangeinvalidAccess EQU $004E ; error - access not allowedbuffTooSmall EQU $004F ; error - buffer too smallfileBusy EQU $0050 ; error - file is already opendirError EQU $0051 ; error - directory errorunknownVol EQU $0052 ; error - unknown volume type    IF &FINDSYM(&SYSGLOBAL,'PARAMRANGEERR')=0 AND &FINDSYM(&SYSGLOBAL,'paramrangeerr')=0 THEN ; error - parameter out of rangeparamRangeErr EQU $0053    ENDIFoutOfMem EQU $0054 ; error - out of memorydupVolume EQU $0057 ; error - duplicate volume namenotBlockDev EQU $0058 ; error - not a block device    IF &FINDSYM(&SYSGLOBAL,'INVALIDLEVEL')=0 AND &FINDSYM(&SYSGLOBAL,'invalidlevel')=0 THEN ; error - specifield level outside legal rangeinvalidLevel EQU $0059    ENDIFdamagedBitMap EQU $005A ; error - block number too largebadPathNames EQU $005B ; error - invalid pathnames for ChangePathnotSystemFile EQU $005C ; error - not an executable fileosUnsupported EQU $005D ; error - Operating System not supported    IF &FINDSYM(&SYSGLOBAL,'STACKOVERFLOW')=0 AND &FINDSYM(&SYSGLOBAL,'stackoverflow')=0 THEN ; error - too many applications on stackstackOverflow EQU $005F    ENDIFdataUnavail EQU $0060 ; error - Data unavailableendOfDir EQU $0061 ; error - end of directory has been reachedinvalidClass EQU $0062 ; error - invalid FST call classresForkNotFound EQU $0063 ; error - file does not contain required resourceinvalidFSTID EQU $0064 ; error - error - FST ID is invalidProDOSFSID EQU $0001 ; fileSysID - ProDOS/SOS dos33FSID EQU $0002 ; fileSysID - DOS 3.3dos32FSID EQU $0003 ; fileSysID - DOS 3.2dos31FSID EQU $0003 ; fileSysID - DOS 3.1appleIIPascalFSID EQU $0004 ; fileSysID - Apple II PascalmfsFSID EQU $0005 ; fileSysID - Macintosh (flat file system)hfsFSID EQU $0006 ; fileSysID - Macintosh (hierarchical file system)lisaFSID EQU $0007 ; fileSysID - Lisa file systemappleCPMFSID EQU $0008 ; fileSysID - Apple CP/McharFSTFSID EQU $0009 ; fileSysID - Character FSTmsDOSFSID EQU $000A ; fileSysID - MS/DOShighSierraFSID EQU $000B ; fileSysID - High SierraISO9660FSID EQU $000C ; fileSysID - ISO 9660characterFST EQU $4000 ; FSTInfo.attributes - character FSTucFST EQU $8000 ; FSTInfo.attributes - SCM should upper case pathnames before passing them to the FSTonStack EQU $8000 ; QuitRec.flags - place state information about quitting program on the quit return stackrestartable EQU $4000 ; QuitRec.flags - the quitting program is capable of being restarted from its dormant memoryseedling EQU $0001 ; storageType - standard file with seedling structurestandardFile EQU $0001 ; storageType - standard file type (no resource fork)sapling EQU $0002 ; storageType - standard file with sapling structuretree EQU $0003 ; storageType - standard file with tree structurepascalRegion EQU $0004 ; storageType - UCSD Pascal region on a partitioned diskextendedFile EQU $0005 ; storageType - extended file type (with resource fork)directoryFile EQU $000D ; storageType - volume directory or subdirectory fileminorRelNumMask EQU $00FF ; version - minor release numbermajorRelNumMask EQU $7F00 ; version - major release numberfinalRelNumMask EQU $8000 ; version - final release numberisFileExtended EQU $8000PrefixRecGS RECORD 0 ; GSOSpCount  DS.B 2 ; Word - prefixNum  DS.B 2 ; Word - prefix  DS.B 4 ; ResultBuf255Ptr or GSString255Ptr -   ENDR; File:  E16.IntMath;;; Copyright Apple computer, Inc. 1986-89; All Rights Reserved;;imBadInptParam EQU $0B01 ; error - bad input parameterimIllegalChar EQU $0B02 ; error - Illegal character in stringimOverflow EQU $0B03 ; error - integer or long integer overflowimStrOverflow EQU $0B04 ; error - string overflowminLongint EQU $80000000 ; Limit - minimum negative signed long integerminFrac EQU $80000000 ; Limit - pinned value for negative Frac overflowminFixed EQU $80000000 ; Limit - pinned value for negative Fixed overflowminInt EQU $8000 ; Limit - Minimum negative signed integermaxInt EQU $7FFF ; Limit - Maximum positive signed integermaxUInt EQU $FFFF ; Limit - Maximum positive unsigned integermaxLongint EQU $7FFFFFFF ; Limit - maximum positive signed LongintmaxFrac EQU $7FFFFFFF ; Limit - pinned value for positive Frac overflowmaxFixed EQU $7FFFFFFF ; Limit - pinned value for positive Fixed overflowmaxULong EQU $FFFFFFFF ; Limit - maximum unsigned LongunsignedFlag EQU $0000signedFlag EQU $0001; offset constants for IntDivRecoidquotient EQU 0oidremainder EQU 2; offset constants for LongDivRecoldquotient EQU 0oldremainder EQU 4; offset constants for LongMulRecolsResult EQU 0omsResult EQU 4; offset constants for WordDivRecowdquotient EQU 0owdremainder EQU 2; File:  E16.LineEdit;;; Copyright Apple computer, Inc. 1986-89; All Rights Reserved;;leDupStrtUpErr EQU $1401 ; error - duplicate LEStartup callleResetErr EQU $1402 ; error - can't reset Line EditleNotActiveErr EQU $1403 ; error - Line Edit not activeleScrapErr EQU $1404 ; error - desk scrap too big to copyleJustLeft EQU $0000leJustCenter EQU $0001leJustFill EQU $0002leJustRight EQU $FFFF; offset constants for LERecoleLineHandle EQU 0oleLength EQU 4oleMaxLength EQU 6oleDestRect EQU 8oleViewRect EQU 16olePort EQU 24oleLineHite EQU 28oleBaseHite EQU 30oleSelStart EQU 32oleSelEnd EQU 34oleActFlg EQU 36oleCarAct EQU 38oleCarOn EQU 40oleCarTime EQU 42oleHiliteHook EQU 46oleCaretHook EQU 50oleJust EQU 54olePWChar EQU 56; File:  E16.List;;; Copyright Apple computer, Inc. 1986-89; All Rights Reserved;;cString EQU $0001 ; ListType bit mask - null terminated string typeLIST_STRG EQU $0001 ; ListType bit mask - null terminated string typeselectOnlyOne EQU $0002 ; ListType bit mask - only one selection allowedLIST_SELECT EQU $0002 ; ListType bit mask - single selection onlymemDisabled EQU $40 ; memFlag - Sets member flag to disabledmemSelected EQU $80 ; memFlag - Sets member flag to selected; offset constants for LColorTableolistFrameClr EQU 0olistNorTextClr EQU 2olistSelTextClr EQU 4olistNorBackClr EQU 6olistSelBackClr EQU 8; offset constants for MemRecomemPtr EQU 0omemFlag EQU 4; Front of ListCtlRec matches CtlRecoctlMemDraw EQU 40octlMemHeight EQU 44octlMemSize EQU 46octlList EQU 48octlListBar EQU 52; offset constants for ListRecolistRect EQU 0olistSize EQU 8olistView EQU 10olistType EQU 12olistStart EQU 14olistCtl EQU 16olistDraw EQU 20olistMemHeight EQU 24olistMemSize EQU 26olistPointer EQU 28olistRefCon EQU 32olistScrollClr EQU 36; File:  E16.Loader;;; Copyright Apple computer, Inc. 1986-89; All Rights Reserved;;idNotFound EQU $1101 ; error - segment/application/entry not foundidNotLoadFile EQU $1104 ; error - file is not a load fileidBusyErr EQU $1105 ; error - system loader is busyidFilVersErr EQU $1107 ; error - file version erroridUserIDErr EQU $1108 ; error - user ID erroridSequenceErr EQU $1109 ; error - segnum out of sequenceidBadRecordErr EQU $110A ; error - illegal load record foundidForeignSegErr EQU $110B ; error - segment is foreign; offset constants for InitialLoadOutputRecouserID EQU 0ostartAddr EQU 2odPageAddr EQU 6obuffSize EQU 8; offset constants for RestartOutRecorouserID EQU 0orostartAddr EQU 2orodPageAddr EQU 6orobuffSize EQU 8; offset constants for LoadSegNameOutosegAddr EQU 0ofileNum EQU 4osegNum EQU 6; offset constants for UnloadSegOutRecoususerID EQU 0ousfileNum EQU 2oussegNum EQU 4; File:  E16.Locator;;; Copyright Apple computer, Inc. 1986-89; All Rights Reserved;;toolNotFoundErr EQU $0001funcNotFoundErr EQU $0002toolVersionErr EQU $0110sysStrtMtErr EQU $0100 ; error - can't mount system startup volumemessNotFoundErr EQU $0111fileInfoType EQU $0001 ; MessageCenter - Message type parameteraddMessage EQU $0001 ; MessageCenter - action parametergetMessage EQU $0002 ; MessageCenter - action parameterdeleteMessage EQU $0003 ; MessageCenter - action parametermvReturn EQU $0001 ; TLMountVolume - like ok for dialogsmvEscape EQU $0002 ; TLMountVolume - like cancel for dialogssysTool EQU $0000userTool EQU $8000; offset constants for MessageRecomessageNext EQU 0omessageType EQU 4omessageData EQU 6ofileNames EQU 8; offset constants for ToolSpecotoolNumber EQU 0ominVersion EQU 2; offset constants for StartStopRecordossflags EQU 0ossvideoMode EQU 2ossresFileID EQU 4ossdPageHandle EQU 6ossnumTools EQU 10; File:  E16.Memory;;; Copyright Apple computer, Inc. 1986-89; All Rights Reserved;;memErr EQU $0201 ; error - unable to allocate blockemptyErr EQU $0202 ; error - illegal operation, empty handlenotEmptyErr EQU $0203 ; error - an empty handle was expected for this operationlockErr EQU $0204 ; error - illegal operation on a locked blockpurgeErr EQU $0205 ; error - attempt to purge an unpurgable blockhandleErr EQU $0206 ; error - an invalid handle was givenidErr EQU $0207 ; error - an invalid owner ID was givenattrErr EQU $0208 ; error - operation illegal on block with given attributesattrNoPurge EQU $0000 ; Handle Attribute Bits - Not purgeableattrBank EQU $0001 ; Handle Attribute Bits - fixed bankattrAddr EQU $0002 ; Handle Attribute Bits - fixed addressattrPage EQU $0004attrNoSpec EQU $0008attrNoCross EQU $0010attrPurge1 EQU $0100 ; Handle Attribute Bits - Purge level 1attrPurge2 EQU $0200 ; Handle Attribute Bits - Purge level 2attrPurge3 EQU $0300 ; Handle Attribute Bits - Purge level 3attrPurge EQU $0300attrHandle EQU $1000 ; Handle Attribute Bits - block of master pointersattrSystem EQU $2000 ; Handle Attribute Bits - system handleattrFixed EQU $4000 ; Handle Attribute Bits - not movableattrLocked EQU $8000 ; Handle Attribute Bits - locked; File:  E16.Menu;;; Copyright Apple computer, Inc. 1986-89; All Rights Reserved;;mDrawMsg EQU $0000mChooseMsg EQU $0001mSizeMsg EQU $0002mDrawTitle EQU $0003mDrawMItem EQU $0004mGetMItemID EQU $0005mInvis EQU $0004mCustom EQU $0010mXor EQU $0020mSelected EQU $0040mDisabled EQU $0080customMenu EQU $0010xorMItemHilite EQU $0020xorTitleHilite EQU $0020underMItem EQU $0040disableItem EQU $0080disableMenu EQU $0080enableItem EQU $FF7FenableMenu EQU $FF7FnoUnderMItem EQU $FFBFcolorMItemHilite EQU $FFDFcolorTitleHilite EQU $FFDFcolorReplace EQU $FFDFstandardMenu EQU $FFEF; offset constants for MenuRecomenuID EQU 0omenuWidth EQU 2omenuHeight EQU 4omenuProc EQU 6omenuFlag EQU 10omenuRes EQU 11ofirstItem EQU 12onumOfItems EQU 13otitleWidth EQU 14otitleName EQU 16; File:  E16.Midi;;; Copyright Apple computer, Inc. 1986-89; All Rights Reserved;;miToolNum EQU $0020miDrvrFileType EQU $00BBmiNSVer EQU $0102miSTVer EQU $0203miDrvrAuxType EQU $0300miStartUpErr EQU $2000miPacketErr EQU $2001miArrayErr EQU $2002miFullBufErr EQU $2003miToolsErr EQU $2004miOutOffErr EQU $2005miNoBufErr EQU $2007miDriverErr EQU $2008miBadFreqErr EQU $2009miClockErr EQU $200AmiConflictErr EQU $200BmiNoDevErr EQU $200CmiDevNotAvail EQU $2080miDevSlotBusy EQU $2081miDevBusy EQU $2082miDevOverrun EQU $2083miDevNoConnect EQU $2084miDevReadErr EQU $2085miDevVersion EQU $2086miDevIntHndlr EQU $2087miSetClock EQU $0000miStartClock EQU $0001miStopClock EQU $0002miSetFreq EQU $0003miRawMode EQU $00000000miSetRTVec EQU $0000miPacketMode EQU $00000001miSetErrVec EQU $0001miStandardMode EQU $00000002miSetInBuf EQU $0002miSetOutBuf EQU $0003miStartInput EQU $0004miStartOutput EQU $0005miStopInput EQU $0006miStopOutput EQU $0007miFlushInput EQU $0008miFlushOutput EQU $0009miFlushPacket EQU $000AmiWaitOutput EQU $000BmiSetInMode EQU $000CmiSetOutMode EQU $000DmiClrNotePad EQU $000EmiSetDelay EQU $000FmiOutputStat EQU $0010miIgnoreSysEx EQU $0011miSelectDrvr EQU $0000miLoadDrvr EQU $0001miUnloadDrvr EQU $0002miNextPktLen EQU $0miInputChars EQU $0001miOutputChars EQU $0002miMaxInChars EQU $0003miMaxOutChars EQU $0004miRecordAddr EQU $0005miPlayAddr EQU $0006miClockValue EQU $0007miClockFreq EQU $0008midiInputPoll EQU $00E101B2 ; MidiInputChannel - vector to poll MIDI input channel; offset constants for MiBufInfoobufSize EQU 0oaddress EQU 2; offset constants for MiDriverInfooslot EQU 0oexternal EQU 2opathname EQU 4; File:  E16.MiscTool;;; Copyright Apple computer, Inc. 1986-89; All Rights Reserved;;badInputErr EQU $0301 ; error - bad input parameternoDevParamErr EQU $0302 ; error - no device for input parametertaskInstlErr EQU $0303 ; error - task already installed errornoSigTaskErr EQU $0304 ; error - no signature in task headerqueueDmgdErr EQU $0305 ; error - queue has been damaged errortaskNtFdErr EQU $0306 ; error - task was not found errorfirmTaskErr EQU $0307 ; error - firmware task was unsuccessfulhbQueueBadErr EQU $0308 ; error - heartbeat queue damagedunCnctdDevErr EQU $0309 ; error - attempted to dispatch to unconnected deviceidTagNtAvlErr EQU $030B ; error - ID tag not availablepdosUnClmdIntErr EQU $0001 ; System Fail - ProDOS unclaimed interrupt errordivByZeroErr EQU $0004 ; System Fail - divide by zero errorpdosVCBErr EQU $000A ; System Fail - ProDOS VCB unusablepdosFCBErr EQU $000B ; System Fail - ProDOS FCB unusablepdosBlk0Err EQU $000C ; System Fail - ProDOS block zero allocated illegallypdosIntShdwErr EQU $000D ; System Fail - ProDOS interrupt w/ shadowing offsegLoader1Err EQU $0015 ; System Fail - segment loader errorsPackage0Err EQU $0017 ; System Fail - can't load a packagepackage1Err EQU $0018 ; System Fail - can't load a packagepackage2Err EQU $0019 ; System Fail - can't load a packagepackage3Err EQU $001A ; System Fail - can't load a packagepackage4Err EQU $001B ; System Fail - can't load a packagepackage5Err EQU $001C ; System Fail - can't load a packagepackage6Err EQU $001D ; System Fail - can't load a packagepackage7Err EQU $001E ; System Fail - can't load a packagepackage8Err EQU $0020 ; System Fail - can't load a packagepackage9Err EQU $0021 ; System Fail - can't load a packagepackage10Err EQU $0022 ; System Fail - can't load a packagepackage11Err EQU $0023 ; System Fail - can't load a packagepackage12Err EQU $0024 ; System Fail - can't load a packageoutOfMemErr EQU $0025 ; System Fail - out of memory errorsegLoader2Err EQU $0026 ; System Fail - segment loader errorfMapTrshdErr EQU $0027 ; System Fail - file map trashedstkOvrFlwErr EQU $0028 ; System Fail - stack overflow errorpsInstDiskErr EQU $0030 ; System Fail - Please Insert Disk (file manager alert)memMgr1Err EQU $0032 ; System Fail - memory manager errormemMgr2Err EQU $0033 ; System Fail - memory manager errormemMgr3Err EQU $0034 ; System Fail - memory manager errormemMgr4Err EQU $0035 ; System Fail - memory manager errormemMgr5Err EQU $0036 ; System Fail - memory manager errormemMgr6Err EQU $0037 ; System Fail - memory manager errormemMgr7Err EQU $0038 ; System Fail - memory manager errormemMgr8Err EQU $0039 ; System Fail - memory manager errormemMgr9Err EQU $003A ; System Fail - memory manager errormemMgr10Err EQU $003B ; System Fail - memory manager errormemMgr11Err EQU $003C ; System Fail - memory manager errormemMgr12Err EQU $003D ; System Fail - memory manager errormemMgr13Err EQU $003E ; System Fail - memory manager errormemMgr14Err EQU $003F ; System Fail - memory manager errormemMgr15Err EQU $0040 ; System Fail - memory manager errormemMgr16Err EQU $0041 ; System Fail - memory manager errormemMgr17Err EQU $0042 ; System Fail - memory manager errormemMgr18Err EQU $0043 ; System Fail - memory manager errormemMgr19Err EQU $0044 ; System Fail - memory manager errormemMgr20Err EQU $0045 ; System Fail - memory manager errormemMgr21Err EQU $0046 ; System Fail - memory manager errormemMgr22Err EQU $0047 ; System Fail - memory manager errormemMgr23Err EQU $0048 ; System Fail - memory manager errormemMgr24Err EQU $0049 ; System Fail - memory manager errormemMgr25Err EQU $004A ; System Fail - memory manager errormemMgr26Err EQU $004B ; System Fail - memory manager errormemMgr27Err EQU $004C ; System Fail - memory manager errormemMgr28Err EQU $004D ; System Fail - memory manager errormemMgr29Err EQU $004E ; System Fail - memory manager errormemMgr30Err EQU $004F ; System Fail - memory manager errormemMgr31Err EQU $0050 ; System Fail - memory manager errormemMgr32Err EQU $0051 ; System Fail - memory manager errormemMgr33Err EQU $0052 ; System Fail - memory manager errormemMgr34Err EQU $0053 ; System Fail - memory manager errorstupVolMntErr EQU $0100 ; System Fail - can't mount system startup volumep1PrntModem EQU $0000p1LineLnth EQU $0001p1DelLine EQU $0002p1AddLine EQU $0003p1Echo EQU $0004p1Buffer EQU $0005p1Baud EQU $0006p1DtStpBits EQU $0007p1Parity EQU $0008p1DCDHndShk EQU $0009p1DSRHndShk EQU $000Ap1XnfHndShk EQU $000Bp2PrntModem EQU $000Cp2LineLnth EQU $000Dp2DelLine EQU $000Ep2AddLine EQU $000Fp2Echo EQU $0010p2Buffer EQU $0011p2Baud EQU $0012p2DtStpBits EQU $0013p2Parity EQU $0014p2DCDHndShk EQU $0015p2DSRHndShk EQU $0016p2XnfHndShk EQU $0017dspColMono EQU $0018dsp40or80 EQU $0019dspTxtColor EQU $001AdspBckColor EQU $001BdspBrdColor EQU $001Chrtz50or60 EQU $001DuserVolume EQU $001EbellVolume EQU $001FsysSpeed EQU $0020slt1intExt EQU $0021slt2intExt EQU $0022slt3intExt EQU $0023slt4intExt EQU $0024slt5intExt EQU $0025slt6intExt EQU $0026slt7intExt EQU $0027startupSlt EQU $0028txtDspLang EQU $0029kybdLang EQU $002AkyBdBuffer EQU $002BkyBdRepSpd EQU $002CkyBdRepDel EQU $002DdblClkTime EQU $002EflashRate EQU $002FshftCpsLCas EQU $0030fstSpDelKey EQU $0031dualSpeed EQU $0032hiMouseRes EQU $0033dateFormat EQU $0034clockFormat EQU $0035rdMinRam EQU $0036rdMaxRam EQU $0037langCount EQU $0038lang1 EQU $0039lang2 EQU $003Alang3 EQU $003Blang4 EQU $003Clang5 EQU $003Dlang6 EQU $003Elang7 EQU $003Flang8 EQU $0040layoutCount EQU $0041layout1 EQU $0042layout2 EQU $0043layout3 EQU $0044layout4 EQU $0045layout5 EQU $0046layout6 EQU $0047layout7 EQU $0048layout8 EQU $0049layout9 EQU $004Alayout10 EQU $004Blayout11 EQU $004Clayout12 EQU $004Dlayout13 EQU $004Elayout14 EQU $004Flayout15 EQU $0050layout16 EQU $0051aTalkNodeNo EQU $0080irqIntFlag EQU $0000irqDataReg EQU $0001irqSerial1 EQU $0002irqSerial2 EQU $0003irqAplTlkHi EQU $0004tickCnt EQU $0005irqVolume EQU $0006irqActive EQU $0007irqSndData EQU $0008brkVar EQU $0009evMgrData EQU $000AmouseSlot EQU $000BmouseClamps EQU $000CabsClamps EQU $000DsccIntFlag EQU $000EextVGCInt EQU $0001 ; Hardware Interrupt Status - Returned by GetIRQEnablescanLineInt EQU $0002 ; Hardware Interrupt Status - Returned by GetIRQEnableadbDataInt EQU $0004 ; Hardware Interrupt Status - Returned by GetIRQEnableoneSecInt EQU $0010 ; Hardware Interrupt Status - Returned by GetIRQEnablequartSecInt EQU $0020 ; Hardware Interrupt Status - Returned by GetIRQEnablevbInt EQU $0040 ; Hardware Interrupt Status - Returned by GetIRQEnablekbdInt EQU $0080 ; Hardware Interrupt Status - Returned by GetIRQEnablekybdEnable EQU $0000 ; Interrupt Ref Number - Parameter to IntSourcekybdDisable EQU $0001 ; Interrupt Ref Number - Parameter to IntSourcevblEnable EQU $0002 ; Interrupt Ref Number - Parameter to IntSourcevblDisable EQU $0003 ; Interrupt Ref Number - Parameter to IntSourceqSecEnable EQU $0004 ; Interrupt Ref Number - Parameter to IntSourceqSecDisable EQU $0005 ; Interrupt Ref Number - Parameter to IntSourceoSecEnable EQU $0006 ; Interrupt Ref Number - Parameter to IntSourceoSecDisable EQU $0007 ; Interrupt Ref Number - Parameter to IntSourceadbEnable EQU $000A ; Interrupt Ref Number - Parameter to IntSourceadbDisable EQU $000B ; Interrupt Ref Number - Parameter to IntSourcescLnEnable EQU $000C ; Interrupt Ref Number - Parameter to IntSourcescLnDisable EQU $000D ; Interrupt Ref Number - Parameter to IntSourceexVCGEnable EQU $000E ; Interrupt Ref Number - Parameter to IntSourceexVCGDisable EQU $000F ; Interrupt Ref Number - Parameter to IntSourcemouseOff EQU $0000transparent EQU $0001transParnt EQU $0001 ; Mouse Mode Value - (old name)moveIntrpt EQU $0003bttnIntrpt EQU $0005bttnOrMove EQU $0007mouseOffVI EQU $0008transParntVI EQU $0009 ; Mouse Mode Value - (old name)transparentVI EQU $0009moveIntrptVI EQU $000BbttnIntrptVI EQU $000DbttnOrMoveVI EQU $000FtoolLoc1 EQU $0000toolLoc2 EQU $0001usrTLoc1 EQU $0002usrTLoc2 EQU $0003intrptMgr EQU $0004copMgr EQU $0005abortMgr EQU $0006_sysFailMgr EQU $0007aTalkIntHnd EQU $0008sccIntHnd EQU $0009scLnIntHnd EQU $000AsndIntHnd EQU $000BvblIntHnd EQU $000CmouseIntHnd EQU $000DqSecIntHnd EQU $000EkybdIntHnd EQU $000FadbRBIHnd EQU $0010adbSRQHnd EQU $0011deskAccHnd EQU $0012flshBufHnd EQU $0013kybdMicHnd EQU $0014oneSecHnd EQU $0015extVCGHnd EQU $0016otherIntHnd EQU $0017crsrUpdtHnd EQU $0018incBsyFlag EQU $0019decBsyFlag EQU $001AbellVector EQU $001BbreakVector EQU $001CtraceVector EQU $001DstepVector EQU $001EctlYVector EQU $0028proDOSVctr EQU $002AosVector EQU $002BmsgPtrVctr EQU $002C; offset constants for ClampRecoyMaxClamp EQU 0oyMinClamp EQU 2oxMaxClamp EQU 4oxMinClamp EQU 6; offset constants for FWRecoyRegExit EQU 0oxRegExit EQU 2oaRegExit EQU 4ostatus EQU 6; offset constants for MouseRecomouseMode EQU 0omouseStatus EQU 1oyPos EQU 2oxPos EQU 4; offset constants for InterruptStateRecoirq_A EQU 0oirq_X EQU 2oirq_Y EQU 4oirq_S EQU 6oirq_D EQU 8oirq_P EQU 10oirq_DB EQU 11oirq_e EQU 12oirq_K EQU 13oirq_PC EQU 14oirq_state EQU 16oirq_shadow EQU 17oirq_mslot EQU 19; File:  E16.NoteSeq;;; Copyright Apple computer, Inc. 1986-89; All Rights Reserved;;pitchBend EQU $0tempo EQU $00000001turnNotesOff EQU $00000002jump EQU $00000003setVibratoDepth EQU $00000004programChange EQU $00000005setRegister EQU $00000006ifGo EQU $00000007incRegister EQU $00000008decRegister EQU $00000009midiNoteOff EQU $0000000AmidiNoteOn EQU $0000000BmidiPolyKey EQU $0000000CmidiCtlChange EQU $0000000DmidiProgChange EQU $0000000EmidiChnlPress EQU $0000000FmidiPitchBend EQU $00000010midiSelChnlMode EQU $00000011midiSysExclusive EQU $00000012midiSysCommon EQU $00000013midiSysRealTime EQU $00000014midiSetSysExl EQU $00000015commandMask EQU $0000007FvolumeMask EQU $0000007Fchord EQU $00000080val1Mask EQU $00007F00toneMask EQU $00007F00noteMask EQU $00008000lByte EQU $00FF0000 ; Command - meaning depends on midi commanddurationMask EQU $07FF0000trackMask EQU $78000000delayMask EQU $80000000hByte EQU $FF000000noRoomMidiErr EQU $1A00noCommandErr EQU $1A01 ; error - can't understand the current SeqItemnoRoomErr EQU $1A02 ; error - sequence is more than twelve levels deepstartedErr EQU $1A03 ; error - Note Sequencer is already startednoNoteErr EQU $1A04 ; error - can't find the note to be turned off by the current SeqItemnoStartErr EQU $1A05 ; error - Note Sequencer not started yetinstBndsErr EQU $1A06 ; error - Instrument number out of Instrument boundary rangensWrongVer EQU $1A07 ; error - incompatible versions of NoteSequencer and NoteSynthesizer; offset constants for LocRecocurPhraseItem EQU 0ocurPattItem EQU 2ocurLevel EQU 4; File:  E16.NoteSyn;;; Copyright Apple computer, Inc. 1986-89; All Rights Reserved;;nsAlreadyInit EQU $1901 ; error - Note Syn already initializednsSndNotInit EQU $1902 ; error - Sound Tools not initializednsNotAvail EQU $1921 ; error - generator not availablensBadGenNum EQU $1922 ; error - bad generator numbernsNotInit EQU $1923 ; error - Note Syn not initializednsGenAlreadyOn EQU $1924 ; error - generator already onsoundWrongVer EQU $1925 ; error - incompatible versions of Sound  and NoteSyn; offset constants for Envelopeost1BkPt EQU 0ost1Increment EQU 1ost2BkPt EQU 3ost2Increment EQU 4ost3BkPt EQU 6ost3Increment EQU 7ost4BkPt EQU 9ost4Increment EQU 10ost5BkPt EQU 12ost5Increment EQU 13ost6BkPt EQU 15ost6Increment EQU 16ost7BkPt EQU 18ost7Increment EQU 19ost8BkPt EQU 21ost8Increment EQU 22; offset constants for WaveFormowfTopKey EQU 0owfWaveAddress EQU 1owfWaveSize EQU 2owfDocMode EQU 3owfRelPitch EQU 4; offset constants for InstrumentotheEnvelope EQU 0oreleaseSegment EQU 24opriorityIncrement EQU 25opitchBendRange EQU 26ovibratoDepth EQU 27ovibratoSpeed EQU 28oinSpare EQU 29oaWaveCount EQU 30obWaveCount EQU 31oaWaveList EQU 32obWaveList EQU 32; File:  E16.Print;;; Copyright Apple computer, Inc. 1986-89; All Rights Reserved;;pntrConFailed EQU $1308 ; error - connection to the printer failedmemFullErr EQU $FF80ioAbort EQU $FFE5prAbort EQU $0080missingDriver EQU $1301 ; errors - specified driver not in system/driversportNotOn EQU $1302 ; errors - specified port not selected in ctl panelnoPrintRecord EQU $1303 ; errors - no print record was givenbadLaserPrep EQU $1304 ; errors - laser prep in laser writer incompatiblebadLPFile EQU $1305 ; errors - laser prep in system/drivers incompatiblepapConnNotOpen EQU $1306 ; errors - cannot connect to laser writerpapReadWriteErr EQU $1307 ; errors - apple talk PAPRead or PAPWrite errorstartUpAlreadyMade EQU $1321 ; errors - low level startup already madeinvalidCtlVal EQU $1322 ; errors - invalid control value had been spec'dreset EQU $0001 ; LLDControl - Printer control value - reset printerformFeed EQU $0002 ; LLDControl - Printer control value - form feedlineFeed EQU $0003 ; LLDControl - Printer control value - line feedbothDrivers EQU $0 ; whichDriver - input to PMLoadDriver and PMUnloadDriverprinterDriver EQU $0001 ; whichDriver - input to PMLoadDriver and PMUnloadDriverportDriver EQU $0002 ; whichDriver - input to PMLoadDriver and PMUnloadDriverPrPortrait EQU $0000prLandscape EQU $0001prImageWriter EQU $0001prImageWriterLQ EQU $0002prLaserWriter EQU $0003prEpson EQU $0004prBlackWhite EQU $0001prColor EQU $0002bDraftLoop EQU $0000bSpoolLoop EQU $0080; offset constants for PrPrinterSpecRecoprPrinterType EQU 0oprCharacteristics EQU 2; offset constants for PrInfoRecoiDev EQU 0oiVRes EQU 2oiHRes EQU 4orPage EQU 6; offset constants for PrJobRecoiFstPage EQU 0oiLstPage EQU 2oiCopies EQU 4obJDocLoop EQU 6ofFromUser EQU 7opIdleProc EQU 8opFileName EQU 12oiFileVol EQU 16obFileVers EQU 18obJobX EQU 19; offset constants for PrStyleRecowDev EQU 0ointernA EQU 2ofeed EQU 8opaperType EQU 10ocrWidth EQU 12oreduction EQU 14ointernB EQU 16; offset constants for PrRecoprVersion EQU 	$0oprInfo EQU 	$2orPaper EQU 	$10oprStl EQU 		$18oprInfoPT EQU 	$2AoprXInfo EQU 	$38oprJob EQU 		$50oprintX EQU 	$64oiReserved EQU 	$8A; offset constants for PrStatusRecoiTotPages EQU 0oiCurPage EQU 2oiTotCopies EQU 4oiCurCopy EQU 6oiTotBands EQU 8oiCurBand EQU 10ofPgDirty EQU 12ofImaging EQU 14ohPrint EQU 16opPrPort EQU 20ohPic EQU 24; File:  E16.ProDOS;;; Copyright Apple computer, Inc. 1986-89; All Rights Reserved;;invalidCallNum EQU $0001 ; error - invalid call numberunclaimedIntErr EQU $01 ; error - fatal error - unclaimed interruptbadPBlockPtr EQU $05 ; error - call pointer out of boundspdosActiveErr EQU $06 ; error - ProDOS is activepdosBusyErr EQU $07 ; error - ProDOS is busyvcbUnusable EQU $0A ; error - fatal error - VCB unusablefcbUnusable EQU $0B ; error - fatal error - FCB unusablebadBlockZero EQU $0C ; error - fatal error - block zero allocated illegallyshdwInterruptErr EQU $0D ; error - fatal error - interrupt occured while I/O shadowing off    IF &FINDSYM(&SYSGLOBAL,'DEVNOTFOUND')=0 AND &FINDSYM(&SYSGLOBAL,'devnotfound')=0 THEN ; error - device not founddevNotFound EQU $10    ENDIFbadDevRefNum EQU $11 ; error - invalid device reference numberosVersionErr EQU $11 ; error - Wrong OS versionbadReqCode EQU $20 ; error - invalid request codeintTableFull EQU $25 ; error - interrupt table fullinvalidOperation EQU $26 ; error - invalid operationioError EQU $27 ; error - I/O errornoDevConnect EQU $28 ; error - no device connectedwriteProtectErr EQU $2B ; error - write protect errordiskSwitchErr EQU $2E ; error - disk switched errordevOffLine EQU $002F ; error - device off line/ no media presentbadPathname EQU $40 ; error - invalid pathname syntaxfcbFullErr EQU $42 ; error - FCB full errorbadFileRefNum EQU $43 ; error - invalid file reference number    IF &FINDSYM(&SYSGLOBAL,'PATHNOTFOUND')=0 AND &FINDSYM(&SYSGLOBAL,'pathnotfound')=0 THEN ; error - path not foundpathNotFound EQU $44    ENDIFvolumeNotFound EQU $45 ; error - volume not found    IF &FINDSYM(&SYSGLOBAL,'FILENOTFOUND')=0 AND &FINDSYM(&SYSGLOBAL,'filenotfound')=0 THEN ; error - file not foundfileNotFound EQU $46    ENDIFdupFileName EQU $47 ; error - duplicate file namevolumeFullErr EQU $48 ; error - volume full errordirFullErr EQU $49 ; error - directory full errorversionErr EQU $4A ; error - version error (incompatible file format)    IF &FINDSYM(&SYSGLOBAL,'BADSTORETYPE')=0 AND &FINDSYM(&SYSGLOBAL,'badstoretype')=0 THEN ; error - unsupported (or incorrect) storage typebadStoreType EQU $4B    ENDIF    IF &FINDSYM(&SYSGLOBAL,'EOFENCOUNTERED')=0 AND &FINDSYM(&SYSGLOBAL,'eofencountered')=0 THEN ; error - end-of-file encounteredeofEncountered EQU $4C    ENDIFpositionRangeErr EQU $4D ; error - position out of rangeaccessErr EQU $4E ; error - access not allowedfileOpenErr EQU $50 ; error - file is opendirDamaged EQU $51 ; error - directory structure is damagedbadVolType EQU $52 ; error - unsupported volume type    IF &FINDSYM(&SYSGLOBAL,'PARAMRANGEERR')=0 AND &FINDSYM(&SYSGLOBAL,'paramrangeerr')=0 THEN ; error - parameter out of rangeparamRangeErr EQU $53    ENDIFmemoryFullErr EQU $54 ; error - out of memoryvcbFullErr EQU $55 ; error - VCB full errordupVolumeErr EQU $57 ; error - duplicate volume errornotBlkDevErr EQU $58 ; error - not a blocked device    IF &FINDSYM(&SYSGLOBAL,'INVALIDLEVEL')=0 AND &FINDSYM(&SYSGLOBAL,'invalidlevel')=0 THEN ; error - invalid levelinvalidLevel EQU $59    ENDIFblkNumRangeErr EQU $5A ; error - block number out of rangenotSameVolErr EQU $5B ; error - different volumes found on ChangePath callnotExecSysFile EQU $5C ; error - not an executable system fileosUnavailable EQU $5D ; error - Operating System/file system not availabledeallocateRamErr EQU $5E ; error - Cannot deallocate /RAM    IF &FINDSYM(&SYSGLOBAL,'STACKOVERFLOW')=0 AND &FINDSYM(&SYSGLOBAL,'stackoverflow')=0 THEN ; error - Return stack overflowstackOverflow EQU $5F    ENDIFdataUnavailable EQU $60 ; error - Data unavailableendofDirectory EQU $0061; offset constants for BlockRecoblockDevNum EQU 0oblockDataBuffer EQU 2oblockNum EQU 6; offset constants for DevNumRecodevName EQU 0odevNum EQU 4; offset constants for DInfoRecodidevNum EQU 0odidevName EQU 2; offset constants for DirEntryRecoderefNum EQU 0odereserved EQU 2odebase EQU 4odedisplacement EQU 6odenameBuffer EQU 8odeentryNum EQU 12odefileType EQU 14odeendOfFile EQU 16odeblockCount EQU 20odecreateTime EQU 24odemodTime EQU 32odeaccess EQU 40odeauxType EQU 42odefileSysID EQU 46; offset constants for EOFRecoeofRefNum EQU 0oeofPosition EQU 2; offset constants for FileIORecofileRefNum EQU 0odataBuffer EQU 2orequestCount EQU 6otransferCount EQU 10; offset constants for FileRecofrpathname EQU 0ofrfAccess EQU 4ofrfileType EQU 6ofrauxType EQU 8ofrstorageType EQU 12ofrcreateDate EQU 14ofrcreateTime EQU 16ofrmodDate EQU 18ofrmodTime EQU 20ofrblocksUsed EQU 22; offset constants for EraseDiskRec;odevName EQU 0ovolName EQU 4ofileSysID EQU 8; offset constants for InterruptRecointNum EQU 0ointCode EQU 2; offset constants for MarkRecomarkRefNum EQU 0oposition EQU 2; offset constants for NewLineReconewLRefNum EQU 0oenableMask EQU 2onewlineChar EQU 4; offset constants for OpenRecoopenRefNum EQU 0oopenPathname EQU 2oioBuffer EQU 6; offset constants for PathNameRec;opathname EQU 0onewPathname EQU 4; offset constants for PrefixRecoprefixNum EQU 0oprefix EQU 2; offset constants for QuitRecoqrquitPathname EQU 0oqrflags EQU 4; offset constants for VolumeRecovrdeviceName EQU 0ovrvolName EQU 4ovrtotalBlocks EQU 8ovrfreeBlocks EQU 12ovrfileSysID EQU 16; File:  E16.QDAux;;; Copyright Apple computer, Inc. 1986-89; All Rights Reserved;;; offset constants for QDIconRecordoqdiconType EQU 0oqdiconSize EQU 2oqdiconHeight EQU 4oqdiconWidth EQU 6oqdiconImage EQU 8oqdiconMask EQU 9; File:  E16.Quickdraw;;; Copyright Apple computer, Inc. 1986-89; All Rights Reserved;;alreadyInitialized EQU $0401 ; error - Quickdraw already initializedcannotReset EQU $0402 ; error - never usednotInitialized EQU $0403 ; error - Quickdraw not initializedscreenReserved EQU $0410 ; error - screen reservedbadRect EQU $0411 ; error - bad rectanglenotEqualChunkiness EQU $0420 ; error - Chunkiness is not equalrgnAlreadyOpen EQU $0430 ; error - region is already openrgnNotOpen EQU $0431 ; error - region is not openrgnScanOverflow EQU $0432 ; error - region scan overflowrgnFull EQU $0433 ; error - region is fullpolyAlreadyOpen EQU $0440 ; error - poly is already openpolyNotOpen EQU $0441 ; error - poly is not openpolyTooBig EQU $0442 ; error - poly is too bigbadTableNum EQU $0450 ; error - bad table numberbadColorNum EQU $0451 ; error - bad color numberbadScanLine EQU $0452 ; error - bad scan linenotImplemented EQU $04FF ; error - not implementedtsNumber EQU $04_colorTable EQU $0F ; AnSCBByte - Mask for SCB color tablescbReserved EQU $10 ; AnSCBByte - Mask for SCB reserved bitscbFill EQU $20 ; AnSCBByte - Mask for SCB fill bitscbInterrupt EQU $40 ; AnSCBByte - Mask for SCB interrupt bitscbColorMode EQU $80 ; AnSCBByte - Mask for SCB color mode bittable320 EQU $32 ; ColorData -  (val=size)table640 EQU $32 ; ColorData -  (val=size)blueMask EQU $000F ; ColorValue - Mask for Blue nibblegreenMask EQU $00F0 ; ColorValue - Mask for green nibbleredMask EQU $0F00 ; ColorValue - Mask for red nibblewidMaxSize EQU $0001zeroSize EQU $0002maskSize EQU $08 ; GrafPort - Mask Size (val=size)locSize EQU $10 ; GrafPort - Loc Size (val=size)patsize EQU $20 ; GrafPort - Pattern Size (val=size)pnStateSize EQU $32 ; GrafPort - Pen State Size (Val=size)portSize EQU $AA ; GrafPort - Size of GrafPortblack EQU $000 ; MasterColors - These work in 320 and 640 modeblue EQU $00F ; MasterColors - These work in 320 and 640 modedarkGreen320 EQU $080 ; MasterColors - These work in 320 modegreen320 EQU $0E0 ; MasterColors - These work in 320 modegreen640 EQU $0F0 ; MasterColors - These work in 640 modelightBlue320 EQU $4DF ; MasterColors - These work in 320 modepurple320 EQU $72C ; MasterColors - These work in 320 modedarkGray320 EQU $777 ; MasterColors - These work in 320 modeperiwinkleBlue320 EQU $78F ; MasterColors - These work in 320 modebrown320 EQU $841 ; MasterColors - These work in 320 modelightGray320 EQU $0CCC ; MasterColors - These work in 320 modered320 EQU $0D00 ; MasterColors - These work in 320 modelilac320 EQU $0DAF ; MasterColors - These work in 320 modered640 EQU $0F00 ; MasterColors - These work in 640 modeorange320 EQU $0F70 ; MasterColors - These work in 320 modeflesh320 EQU $0FA9 ; MasterColors - These work in 320 modeyellow EQU $0FF0 ; MasterColors - These work in 320 and 640 modewhite EQU $0FFF ; MasterColors - These work in 320 and 640 modemodeCopy EQU $0000modeOR EQU $0001modeXOR EQU $0002modeBIC EQU $0003modeForeCopy EQU $0004modeForeOR EQU $0005modeForeXOR EQU $0006modeForeBIC EQU $0007modeNOT EQU $8000notCopy EQU $8000notOR EQU $8001notXOR EQU $8002notBIC EQU $8003notForeCOPY EQU $8004notForeOR EQU $8005notForeXOR EQU $8006notForeBIC EQU $8007frameVerb EQU $00 ; PicInfo - PRIVATE - for reference onlypicNop EQU $00 ; PicInfo - PRIVATE - for reference onlydrawCharVerb EQU $00 ; PicInfo - PRIVATE - for reference onlypaintVerb EQU $01 ; PicInfo - PRIVATE - for reference onlypicClipRgn EQU $01 ; PicInfo - PRIVATE - for reference onlydrawTextVerb  EQU $01 ; PicInfo - PRIVATE - for reference onlyeraseVerb EQU $02 ; PicInfo - PRIVATE - for reference onlypicBkPat EQU $02 ; PicInfo - PRIVATE - for reference onlydrawCStrVerb EQU $02 ; PicInfo - PRIVATE - for reference onlyinvertVerb EQU $03 ; PicInfo - PRIVATE - for reference onlypicTxFont EQU $03 ; PicInfo - PRIVATE - for reference onlyfillVerb EQU $04 ; PicInfo - PRIVATE - for reference onlypicTxFace EQU $04 ; PicInfo - PRIVATE - for reference onlypicTxMode EQU $05 ; PicInfo - PRIVATE - for reference onlypicSpExtra EQU $06 ; PicInfo - PRIVATE - for reference onlypicPnSize EQU $07 ; PicInfo - PRIVATE - for reference onlypicPnMode EQU $08 ; PicInfo - PRIVATE - for reference onlypicPnPat EQU $09 ; PicInfo - PRIVATE - for reference onlypicThePat EQU $0A ; PicInfo - PRIVATE - for reference onlypicOvSize EQU $0B ; PicInfo - PRIVATE - for reference onlypicOrigin EQU $0C ; PicInfo - PRIVATE - for reference onlypicTxSize EQU $0D ; PicInfo - PRIVATE - for reference onlypicFGColor EQU $0E ; PicInfo - PRIVATE - for reference onlypicBGColor EQU $0F ; PicInfo - PRIVATE - for reference onlypicTxRatio EQU $10 ; PicInfo - PRIVATE - for reference onlypicVersion EQU $11 ; PicInfo - PRIVATE - for reference onlylineNoun EQU $20 ; PicInfo - PRIVATE - for reference onlypicLine EQU $20 ; PicInfo - PRIVATE - for reference onlypicLineFrom EQU $21 ; PicInfo - PRIVATE - for reference onlypicShortL EQU $22 ; PicInfo - PRIVATE - for reference onlypicShortLFrom EQU $23 ; PicInfo - PRIVATE - for reference onlypicLongText EQU $28 ; PicInfo - PRIVATE - for reference onlypicDHText EQU $29 ; PicInfo - PRIVATE - for reference onlypicDVText EQU $2A ; PicInfo - PRIVATE - for reference onlypicDVDHText EQU $2B ; PicInfo - PRIVATE - for reference onlyrectNoun EQU $30 ; PicInfo - PRIVATE - for reference onlyrRectNoun EQU $40 ; PicInfo - PRIVATE - for reference onlyovalNoun EQU $50 ; PicInfo - PRIVATE - for reference onlyarcNoun EQU $60 ; PicInfo - PRIVATE - for reference onlypolyNoun EQU $70 ; PicInfo - PRIVATE - for reference onlyrgnNoun EQU $80 ; PicInfo - PRIVATE - for reference onlymapNoun EQU $90 ; PicInfo - PRIVATE - for reference onlypicBitsRect EQU $90 ; PicInfo - PRIVATE - for reference onlypicBitsRgn EQU $91 ; PicInfo - PRIVATE - for reference onlypicPBitsRect EQU $98 ; PicInfo - PRIVATE - for reference onlypicPBitsRgn EQU $99 ; PicInfo - PRIVATE - for reference onlypicShortComment EQU $A0 ; PicInfo - PRIVATE - for reference onlypicLongComment EQU $A1 ; PicInfo - PRIVATE - for reference onlypicEnd EQU $FF ; PicInfo - PRIVATE - for reference onlymode320 EQU $0000 ; QDStartup - Argument to QDStartupmode640 EQU $0080 ; QDStartup - Argument to QDStartupflagUseShadowing EQU $8000 ; QDStartup - Argument to QDStartupflagFastPortAware EQU $4000 ; QDStartup - Argument to QDStartupboldMask EQU $0001 ; TextStyle - Mask for bold bititalicMask EQU $0002 ; TextStyle - Mask for italic bitunderlineMask EQU $0004 ; TextStyle - Mask for underline bitoutlineMask EQU $0008 ; TextStyle - Mask for outline bitshadowMask EQU $0010 ; TextStyle - Mask for shadow bit; offset constants for CursorocursorHeight EQU 0ocursorWidth EQU 2ocursorData EQU 4ocursorMask EQU 6ocursorHotSpot EQU 8; offset constants for RegionorgnSize EQU 0orgnBBox EQU 2; offset constants for BufDimRecomaxWidth EQU 0otextBufHeight EQU 2otextBufferWords EQU 4ofontWidth EQU 6; offset constants for FontooffseToMF EQU 0ofamily EQU 2ostyle EQU 4osize EQU 6oversion EQU 8ofbrExtent EQU 10; offset constants for FontGlobalsRecordofgFontID EQU 0ofgStyle EQU 2ofgSize EQU 4ofgVersion EQU 6ofgWidMax EQU 8ofgFBRExtent EQU 10; offset constants for FontIDofamNum EQU 0ofontStyle EQU 2ofontSize EQU 3; offset constants for FontInfoRecordoascent EQU 0odescent EQU 2owidMax EQU 4oleading EQU 6; offset constants for LocInfooportSCB EQU 0optrToPixImage EQU 2owidth EQU 6oboundsRect EQU 8; offset constants for QDProcsostdText EQU 0ostdLine EQU 4ostdRect EQU 8ostdRRect EQU 12ostdOval EQU 16ostdArc EQU 20ostdPoly EQU 24ostdRgn EQU 28ostdPixels EQU 32ostdComment EQU 36ostdTxMeas EQU 40ostdTxBnds EQU 44ostdGetPic EQU 48ostdPutPic EQU 52; offset constants for GrafPortoportInfo EQU 0oportRect EQU 16oclipRgn EQU 24ovisRgn EQU 28obkPat EQU 32opnLoc EQU 64opnSize EQU 68opnMode EQU 72opnPat EQU 74opnMask EQU 106opnVis EQU 114ofontHandle EQU 116ofontID EQU 120ofontFlags EQU 124otxSize EQU 126otxFace EQU 128otxMode EQU 130ospExtra EQU 132ochExtra EQU 136ofgColor EQU 140obgColor EQU 142opicSave EQU 144orgnSave EQU 148opolySave EQU 152ografProcs EQU 156oarcRot EQU 160ouserField EQU 162osysField EQU 166; offset constants for PaintParamoptrToSourceLocInfo EQU 0optrToDestLocInfo EQU 4optrToSourceRect EQU 8optrToDestPoint EQU 12omode EQU 16omaskHandle EQU 18; offset constants for PenStateopsPnSize EQU 0opsPnMode EQU 4opsPnPat EQU 6opsPnMask EQU 38; offset constants for RomFontRecorfFamNum EQU 0orfFamStyle EQU 2orfSize EQU 4orfFontHandle EQU 6orfNamePtr EQU 10orfFBRExtent EQU 14; offset constants for ColorTableoentries EQU 0; File:  E16.Resources;;; Copyright Apple computer, Inc. 1986-89; All Rights Reserved;;resLogOut EQU $0resLogIn EQU $1resLogApp EQU $0resLogSys EQU $2resForkUsed EQU $1E01 ; Error - Resource fork not emptyresBadFormat EQU $1E02 ; Error - Format of resource fork is unknownresForkEmpty EQU $1E03 ; Error - Resource fork is emptyresNoCurFile EQU $1E04 ; Error - there are no current open resource filesresDupID EQU $1E05 ; Error - ID is already used    IF &FINDSYM(&SYSGLOBAL,'RESNOTFOUND')=0 AND &FINDSYM(&SYSGLOBAL,'resnotfound')=0 THEN ; Error - resource was not foundresNotFound EQU $1E06    ENDIFresFileNotFound EQU $1E07 ; Error - resource file not foundresBadAppID EQU $1E08 ; Error - User ID not found, please call ResourceStartupresNoUniqueID EQU $1E09 ; Error - a unique ID was not foundresBadAttr EQU $1E0A ; Error - reseved bits in attributes word are not zeroresHashGone EQU $1E0B ; Error - the hash count table is no longer validresIndexRange EQU $1E0D ; Error - index is out of rangeresNoCurApp EQU $1E0E ; Error - no current application, please call ResourceStartupresChanged EQU $0020resPreLoad EQU $0040resProtected EQU $0080resAbsLoad EQU $0400resConverter EQU $0800resMemAttr EQU $C3F1systemMap EQU $0001mapChanged EQU $0002romMap EQU $0004resNameOffset EQU $10000resNameVersion EQU $0001rIcon EQU $8001 ; Resources - resource type holding namesrPicture EQU $8002 ; Resources - resource type holding namesrControlList EQU $8003 ; Resources - resource type holding namesrControlTemplate EQU $8004 ; Resources - resource type holding namesrWindow EQU $8005 ; Resources - resource type holding namesrString EQU $8006 ; Resources - resource type holding namesrStringList EQU $8007 ; Resources - resource type holding namesrMenuBar EQU $8008 ; Resources - resource type holding namesrMenu EQU $8009 ; Resources - resource type holding namesrMenuItem EQU $800A ; Resources - resource type holding namesrTextForLETextBox2 EQU $800B ; Resources - resource type holding namesrCtlDefProc EQU $800C ; Resources - resource type holding namesrCtlColorTbl EQU $800D ; Resources - resource type holding namesrWindParam1 EQU $800E ; Resources - resource type holding namesrWindParam2 EQU $800F ; Resources - resource type holding namesrWindColor EQU $8010 ; Resources - resource type holding namesrResName EQU $8014 ; Resources - resource type holding names;-----------------------------------------------------------; FILE:  E16.SANE;;; Copyright Apple Computer, Inc. 1986-88; All Rights Reserved;;;;  These equates give assembly language access to 65816 SANE.;-----------------------------------------------------------;-----------------------------------------------------------; Tool Set and Function Numbers.;-----------------------------------------------------------SANEtsNum       equ     $A              ; SANE tool set numberFPNum           equ     $9              ; Function number for ArithmeticDecStrNum       equ     $A              ; Function number for Scanner/FormatterElemNum         equ     $B              ; Function no. for Elementary functions;-----------------------------------------------------------; Operation code masks.;-----------------------------------------------------------FOADD           equ     $00             ; addFOSUB           equ     $02             ; subtractFOMUL           equ     $04             ; multiplyFODIV           equ     $06             ; divideFOCMP           equ     $08             ; compare, no exception from unorderedFOCPX           equ     $0A             ; compare, signal invalid if unorderedFOREM           equ     $0C             ; remainderFOZ2X           equ     $0E             ; convert to extendedFOX2Z           equ     $10             ; convert from extendedFOSQRT          equ     $12             ; square rootFORTI           equ     $14             ; round to integral valueFOTTI           equ     $16             ; truncate to integral valueFOSCALB         equ     $18             ; binary scaleFOLOGB          equ     $1A             ; binary logFOCLASS         equ     $1C             ; classifyFONEXT          equ     $1E             ; next-afterFOSETENV        equ     $01             ; set environmentFOGETENV        equ     $03             ; get environmentFOSETHV         equ     $05             ; set halt vectorFOGETHV         equ     $07             ; get halt vectorFOD2B           equ     $09             ; convert decimal to binaryFOB2D           equ     $0B             ; convert binary to decimalFONEG           equ     $0D             ; negateFOABS           equ     $0F             ; absolute valueFOCPYSGN        equ     $11             ; copy sign; UNDEFINED     equ     $13FOSETXCP        equ     $15             ; set exceptionFOPROCENTRY     equ     $17             ; procedure-entryFOPROCEXIT      equ     $19             ; procedure-exitFOTESTXCP       equ     $1B             ; test exception; UNDEFINED     equ     $1D; UNDEFINED     equ     $1F;-----------------------------------------------------------; Operand format masks.;-----------------------------------------------------------FFEXT           equ     $000            ; extended -- 80-bit floatFFDBL           equ     $100            ; double   -- 64-bit floatFFSGL           equ     $200            ; single   -- 32-bit floatFFLNG           equ     $300            ; longint  -- 32-bit integer                                                   FFINT           equ     $400            ; integer  -- 16-bit integerFFCOMP          equ     $500            ; comp     -- 64-bit integer; UNDEFINED     equ     $600; UNDEFINED     equ     $700;-----------------------------------------------------------; Class and sign inquiries.;-----------------------------------------------------------FCSNAN          equ     $FC             ; -4: signaling NANFCQNAN          equ     $FD             ; -3: quiet NANFCINF           equ     $FE             ; -2: infiniteFCZERO          equ     $FF             ; -1: zeroFCNORM          equ     $00             ;  0: normalFCDENORM        equ     $01             ;  1: denormal;-----------------------------------------------------------; Exceptions.;-----------------------------------------------------------FBINVALID       equ     $1FBUFLOW         equ     $2FBOFLOW         equ     $4FBDIVZER        equ     $8FBINEXACT       equ     $10;-----------------------------------------------------------; Elementary function operation code masks.;-----------------------------------------------------------FOLNX           equ     $00             ; base-e log FOLOG2X         equ     $02             ; base-2 logFOLN1X          equ     $04             ; ln (1 + x)FOLOG21X        equ     $06             ; log2 (1 + x)FOEXPX          equ     $08             ; base-e exponential  FOEXP2X         equ     $0A             ; base-2 exponentialFOEXP1X         equ     $0C             ; exp (x) - 1FOEXP21X        equ     $0E             ; exp2 (x) - 1FOXPWRI         equ     $10             ; integer exponentiationFOXPWRY         equ     $12             ; general exponentiationFOCOMPOUND      equ     $14             ; compoundFOANNUITY       equ     $16             ; annuityFOATANX         equ     $18             ; arctangentFOSINX          equ     $1A             ; sineFOCOSX          equ     $1C             ; cosineFOTANX          equ     $1E             ; tangentFORANDX         equ     $20             ; random;-----------------------------------------------------------; Scanner and formatter operation code masks.;-----------------------------------------------------------FOPSTR2DEC      equ     0               ; Pascal string to decimal recordFOCSTR2DEC      equ     2               ; C string (char stream) to dec. recordFODEC2STR       equ     1               ; decimal record to (Pascal) string;-----------------------------------------------------------; NaN codes.  ;-----------------------------------------------------------NANSQRT         equ     1               ; Invalid square root such as sqrt(-1)NANADD          equ     2               ; Invalid addition such as +INF - +INF NANDIV          equ     4               ; Invalid division such as 0/0 NANMUL          equ     8               ; Invalid multiply such as 0 * INF NANREM          equ     9               ; Invalid rem or mod such as x REM 0 NANASCBIN       equ     17              ; Conversion of invalid ASCII string NANCOMP         equ     20              ; Comp NaN converted to floatingNANZERO         equ     21              ; Attempt to create a NaN with zero codeNANTRIG         equ     33              ; Invalid argument to trig routine NANINVTRIG      equ     34              ; Invalid arg to inverse trig routine NANLOG          equ     36              ; Invalid argument to log routine NANPOWER        equ     37              ; Invalid argument to x^i or x^y routine NANFINAN        equ     38              ; Invalid argument to financial function             ; File:  E16.Scheduler;;; Copyright Apple computer, Inc. 1986-89; All Rights Reserved;;; File:  E16.Scrap;;; Copyright Apple computer, Inc. 1986-89; All Rights Reserved;;badScrapType EQU $1610 ; error - No scrap of this type.textScrap EQU $0000picScrap EQU $0001; File:  E16.Shell;;; Copyright Apple computer, Inc. 1986-89; All Rights Reserved;;; offset constants for GetLInfoPBosfile EQU 0odfile EQU 4oparms EQU 8olstring EQU 12omerr EQU 16omerrf EQU 17olops EQU 18okflag EQU 19omflags EQU 20opflags EQU 24oorg EQU 28; File:  E16.Sound;;; Copyright Apple computer, Inc. 1986-89; All Rights Reserved;;noDOCFndErr EQU $0810 ; error - no DOC chip founddocAddrRngErr EQU $0811 ; error - DOC address range errornoSAppInitErr EQU $0812 ; error - no SAppInit call madeinvalGenNumErr EQU $0813 ; error - invalid generator numbersynthModeErr EQU $0814 ; error - synthesizer mode errorgenBusyErr EQU $0815 ; error - generator busy errormstrIRQNotAssgnErr EQU $0817 ; error - master IRQ not assignedsndAlreadyStrtErr EQU $0818 ; error - sound tools already startedunclaimedSndIntErr EQU $08FF ; error - sound tools already startedffSynthMode EQU $0001 ; channelGenMode - Free form synthesizer modenoteSynthMode EQU $0002 ; channelGenMode - Note synthesizer mode.gen0off EQU $0001 ; genMask - param to FFStopSoundgen1off EQU $0002 ; genMask - param to FFStopSoundgen2off EQU $0004 ; genMask - param to FFStopSoundgen3off EQU $0008 ; genMask - param to FFStopSoundgen4off EQU $0010 ; genMask - param to FFStopSoundgen5off EQU $0020 ; genMask - param to FFStopSoundgen6off EQU $0040 ; genMask - param to FFStopSoundgen7off EQU $0080 ; genMask - param to FFStopSoundgen8off EQU $0100 ; genMask - param to FFStopSoundgen9off EQU $0200 ; genMask - param to FFStopSoundgen10off EQU $0400 ; genMask - param to FFStopSoundgen11off EQU $0800 ; genMask - param to FFStopSoundgen12off EQU $1000 ; genMask - param to FFStopSoundgen13off EQU $2000 ; genMask - param to FFStopSoundgen14off EQU $4000 ; genMask - param to FFStopSoundgenAvail EQU $0000 ; genStatus - Generator available statusffSynth EQU $0100 ; genStatus - Free Form Synthesizer statusnoteSynth EQU $0200 ; genStatus - Note Synthesizer statuslastBlock EQU $8000 ; genStatus - Last block of wavesmReadRegister EQU $00 ; Jump Table Offset - Read Register routinesmWriteRegister EQU $04 ; Jump Table Offset - Write Register routinesmReadRam EQU $08 ; Jump Table Offset - Read Ram routinesmWriteRam EQU $0C ; Jump Table Offset - Write Ram routinesmReadNext EQU $10 ; Jump Table Offset - Read Next routinesmWriteNext EQU $14 ; Jump Table Offset - Write Next routinesmOscTable EQU $18 ; Jump Table Offset - Pointer to Oscillator tablesmGenTable EQU $1C ; Jump Table Offset - Pointer to generator tablesmGcbAddrTable EQU $20 ; Jump Table Offset - Pointer to GCB address tablesmDisableInc EQU $24 ; Jump Table Offset - Disable Increment routine; offset constants for SoundParamBlockowaveStart EQU 0owaveSize EQU 4ofreqOffset EQU 6odocBuffer EQU 8obufferSize EQU 10onextWavePtr EQU 12ovolSetting EQU 16; offset constants for DocRegParamBlkooscGenType EQU 0ofreqLow1 EQU 2ofreqHigh1 EQU 3ovol1 EQU 4otablePtr1 EQU 5ocontrol1 EQU 6otableSize1 EQU 7ofreqLow2 EQU 8ofreqHigh2 EQU 9ovol2 EQU 10otablePtr2 EQU 11ocontrol2 EQU 12otableSize2 EQU 13; File:  E16.StdFile;;; Copyright Apple computer, Inc. 1986-89; All Rights Reserved;;noDisplay EQU $0000 ; filterProc result - file not to be displayednoSelect EQU $0001 ; filterProc result - file displayed, but not selectabledisplaySelect EQU $0002 ; filterProc result - file displayed and selectablesfMatchFileType EQU $8000sfMatchAuxType EQU $4000sfDisplayGrey EQU $2000; offset constants for SFReplyRecogood EQU 0ofileType EQU 2oauxFileType EQU 4ofilename EQU 6ofullPathname EQU 22;offset constants for SFReplyRec2;ogood EQU 0;ofileType EQU 2oauxType EQU 4onameDesc EQU 8onameRef EQU 10opathDesc EQU 14opathRef EQU 16; File:  E16.TextEdit;;; Copyright Apple computer, Inc. 1986-89; All Rights Reserved;;teAlreadyStarted EQU $2201teNotStarted EQU $2202teInvalidHandle EQU $2203teInvalidVerb EQU $2204teInvalidFlag EQU $2205teInvalidPCount EQU $2206teInvalidRect EQU $2207teBufferOverflow EQU $2208teInvalidLine EQU $2209teInvalidCall EQU $220ANullVerb EQU $0PStringVerb EQU $0001CStringVerb EQU $0002C1InputVerb EQU $0003C1OutputVerb EQU $0004HandleVerb EQU $0005PointerVerb EQU $0006NewPStringVerb EQU $0007fEqualLineSpacing EQU $8000fShowInvisibles EQU $4000teInvalidDescriptor EQU $2204teInvalidParameter EQU $220BteInvalidTextBox2 EQU $220CteEqualLineSpacing EQU $8000teShowInvisibles EQU $4000teJustLeft EQU $0teJustRight EQU $1teJustCenter EQU $2teJustFull EQU $3teNoTabs EQU $0teColumnTabs EQU $1teAbsoluteTabs EQU $2teLeftTab EQU $0teCenterTab EQU $1teRightTab EQU $2teDecimalTab EQU $3teInvis EQU $4000teCtlColorIsPtr EQU $0000teCtlColorIsHandle EQU $0004teCtlColorIsResource EQU $0008teCtlStyleIsPtr EQU $0000teCtlStyleIsHandle EQU $0001teCtlStyleIsResource EQU $0002teNotControl EQU $80000000teSingleFormat EQU $40000000teSingleStyle EQU $20000000teNoWordWrap EQU $10000000teNoScroll EQU $08000000teReadOnly EQU $04000000teSmartCutPaste EQU $02000000teTabSwitch EQU $01000000teDrawBounds EQU $00800000teColorHilite EQU $00400000teRefIsPtr EQU $0000teRefIsHandle EQU $0001teRefIsResource EQU $0002teRefIsNewHandle EQU $0003teDataIsPString EQU $0000teDataIsCString EQU $0001teDataIsC1Input EQU $0002teDataIsC1Output EQU $0003teDataIsTextBox2 EQU $0004teDataIsTextBlock EQU $0005teTextIsPtr EQU $0000teTextIsHandle EQU $0008teTextIsResource EQU $0010teTextIsNewHandle EQU $0018tePartialLines EQU $8000teDontDraw EQU $4000teUseFont EQU $0020teUseSize EQU $0010teUseForeColor EQU $0008teUseBackColor EQU $0004teUseUserData EQU $0002teUseAttributes EQU $0001teReplaceFont EQU $0040teReplaceSize EQU $0020teReplaceForeColor EQU $0010teReplaceBackColor EQU $0008teReplaceUserField EQU $0004teReplaceAttributes EQU $0002teSwitchAttributes EQU $0001teEraseRect EQU $0001teEraseBuffer EQU $0002teRectChanged EQU $0003TEParamBlock RECORD 0 ; TextEditpCount  DS.B 2 ; word -  controlID  DS.B 4 ; long -  boundsRect  DS Rect ; Rect -  procRef  DS.B 4 ; long -  flags  DS.B 2 ; word -  moreflags  DS.B 2 ; word -  refCon  DS.B 4 ; long -  textFlags  DS.B 4 ; long -  indentRect  DS Rect ; Rect -  vertBar  DS.B 4 ; CtlRecHndl -  vertScroll  DS.B 2 ; word -  horzBar  DS.B 4 ; CtlRecHndl -  horzScroll  DS.B 2 ; word -  styleRef  DS.B 4 ; TEStyleRef -  textDescriptor  DS.B 2 ; Word -  textRef  DS.B 4 ; TETextRef -  textLength  DS.B 4 ; long -  maxChars  DS.B 4 ; long -  maxLines  DS.B 4 ; long -  maxHeight  DS.B 2 ; word -  pageHeight  DS.B 2 ; word -  headerHeight  DS.B 2 ; word -  footerHeight  DS.B 2 ; word -  pageBoundary  DS.B 2 ; word -  colorRef  DS.B 4 ; long -  drawMode  DS.B 2 ; word -  filterProcPtr  DS.B 4 ; ProcPtr -    ENDR; File:  E16.TextTool;;; Copyright Apple computer, Inc. 1986-89; All Rights Reserved;;badDevType EQU $0C01 ; error - not implementedbadDevNum EQU $0C02 ; error - Illegal device number.badMode EQU $0C03 ; error - Bad mode: illegal operation.unDefHW EQU $0C04 ; error - Undefined hardware errorlostDev EQU $0C05 ; error - Lost device: Device no longer on linelostFile EQU $0C06 ; error - File no longer in diskette directorybadTitle EQU $0C07 ; error - Illegal FilenametextNoRoom EQU $0C08 ; error - Insufficient space on specified diskettenoDevice EQU $0C09 ; error - Volume not onlinenoFile EQU $0C0A ; error - File not in specifiled directorydupFile EQU $0C0B ; error - Filename already existsnotClosed EQU $0C0C ; error - Attempt to open an open filenotOpen EQU $0C0D ; error - Attempt to close closed filetextBadFormat EQU $0C0E ; error - error reading real or integerringBuffOFlo EQU $0C0F ; error - Chars arriving too fastwriteProtected EQU $0C10devErr EQU $0C40 ; error - Read or Write failedinput EQU $0000output EQU $0001errorOutput EQU $0002basicType EQU $0000pascalType EQU $0001ramBased EQU $0002textNoEcho EQU $0000textEcho EQU $0001; File:  E16.Types;;; Copyright Apple computer, Inc. 1986-89; All Rights Reserved;;refIsPointer EQU $0000 refIsHandle EQU $0001 refIsResource EQU $0002 refIsNewHandle EQU $0003; offset constants for Pointov EQU 0oh EQU 2; offset constants for Rectov1 EQU 0oh1 EQU 2ov2 EQU 4oh2 EQU 6; offset constants for TimeRecosecond EQU 0ominute EQU 1ohour EQU 2oyear EQU 3oday EQU 4omonth EQU 5oextra EQU 6oweekDay EQU 7; File:  E16.Video;;; Copyright Apple computer, Inc. 1986-89; All Rights Reserved;;vdVideoOverlay EQU $01vdFrameGrabber EQU $02vdInVStandards EQU $03vdOutVStandards EQU $04vdKeyDissLevels EQU $05vdNKeyDissLevels EQU $06vdAdjSideEffect EQU $07vdKeyColorBits EQU $08vdInHueAdj EQU $09vdInSatAdj EQU $0AvdInContrastAdj EQU $0BvdInBrightAdj EQU $0CvdOutSetup EQU $0DvdOutChromaFilter EQU $0EvdOutExtBlank EQU $0FvdKeyEnhDiss EQU $10vdLineInterrupt EQU $11vdGGBus EQU $12vdDualOut EQU $13vdTextMonoOver EQU $14vdGenlock EQU $32vdVideoDetect EQU $33vdGenlocked EQU $34vdAdjInc EQU $50vdAdjDec EQU $51vdAdjSave EQU $52vdAvail EQU $01vdNotAvail EQU $00vdYes EQU $01vdNo EQU $00vdOn EQU $01vdOff EQU $00vdKColorEnable EQU $64vdVerticalBlank EQU $82vdMainPageLin EQU $C8vdRAMPageSel EQU $C9vdVBLInterrupt EQU $CAvdInterlaceMode EQU $CBvdClearVBLInt EQU $CCvdClearLineInt EQU $CDvdDisplayField EQU $CEvdVBLIntRequest EQU $CFvdLineIntRequest EQU $D0vdNone EQU $00vdNTSC EQU $01vdPAL EQU $02vdSECAM EQU $04vdSNTSC EQU $08vdSPAL EQU $10vdSSECAM EQU $20vdRGB60 EQU $40vdRGB50 EQU $80vdAux EQU $00vdMain EQU $10vdInterlace EQU $30vdField1 EQU $01vdField0 EQU $00vdEnable EQU $01vdDisable EQU $00vdExternal EQU $00vdGraphics EQU $01vdVBlank EQU $01vdActiveVideo EQU $00vdNoVideoDevice EQU $2110 ; Error - no video device was foundvdAlreadyStarted EQU $2111 ; Error - Video tool set already startedvdInvalidSelector EQU $2112 ; Error - an invalid selector was specifiedvdInvalidParam EQU $2113 ; Error - an invalid parameter was specifiedvdUnImplemented EQU $21FF ; Error - an unimplemented tool set routine was called; File:  E16.Window;;; Copyright Apple computer, Inc. 1986-89; All Rights Reserved;;paramLenErr EQU $0E01 ; error - first word of parameter list is the wrong sizeallocateErr EQU $0E02 ; error - unable to allocate window recordtaskMaskErr EQU $0E03 ; error - bits 12-15 are not clear in WmTaskMask field of EventRecordwNoConstraint EQU $0000 ; Axis parameter - No constraint on movement.wHAxisOnly EQU $0001 ; Axis parameter - Horizontal axis only.wVAxisOnly EQU $0002 ; Axis parameter - Vertical axis only.FromDesk EQU $00 ; Desktop Command - Subtract region from desktopToDesk EQU $1 ; Desktop Command - Add region to desktopGetDesktop EQU $2 ; Desktop Command - Get Handle of Desktop regionSetDesktop EQU $3 ; Desktop Command - Set Handle of Desktop regionGetDeskPat EQU $4 ; Desktop command - Address of  pattern or drawing routineSetDeskPat EQU $5 ; Desktop command - Change Address of  pattern or drawing routineGetVisDesktop EQU $6 ; Desktop command - Get destop region less visible windows.BackGroundRgn EQU $7 ; Desktop command - For drawing directly on desktop.toBottom EQU $FFFFFFFE ; SendBehind value - To send window to bottom.topMost EQU $FFFFFFFF ; SendBehind value - To make window top.bottomMost EQU $0000 ; SendBehind value - To make window bottom.tmMenuKey EQU $0001tmUpdate EQU $0002tmFindW EQU $0004tmMenuSel EQU $0008tmOpenNDA EQU $0010tmSysClick EQU $0020tmDragW EQU $0040tmContent EQU $0080tmClose EQU $0100tmZoom EQU $0200tmGrow EQU $0400tmScroll EQU $0800tmSpecial EQU $1000tmCRedraw EQU $2000tmInactive EQU $4000tmInfo EQU $8000wNoHit EQU $0000 ; TaskMaster codes - retained for back compatibility. inNull EQU $0000 ; TaskMaster codes - retained for back compatibilityinKey EQU $0003 ; TaskMaster codes - retained for back compatibilityinButtDwn EQU $0001 ; TaskMaster codes - retained for back compatibilityinUpdate EQU $0006 ; TaskMaster codes - retained for back compatibilitywInDesk EQU $0010 ; TaskMaster codes - On DesktopwInMenuBar EQU $0011 ; TaskMaster codes - On system menu barwClickCalled EQU $0012 ; TaskMaster codes - system click calledwInContent EQU $0013 ; TaskMaster codes - In content regionwInDrag EQU $0014 ; TaskMaster codes - In drag regionwInGrow EQU $0015 ; TaskMaster codes - In grow region, active window onlywInGoAway EQU $0016 ; TaskMaster codes - In go-away region, active window onlywInZoom EQU $0017 ; TaskMaster codes - In zoom region, active window onlywInInfo EQU $0018 ; TaskMaster codes - In information barwInSpecial EQU $0019 ; TaskMaster codes - Item ID selected was 250 - 255wInDeskItem EQU $001A ; TaskMaster codes - Item ID selected was 1 - 249wInFrame EQU $1B ; TaskMaster codes - in Frame, but not on anything elsewInactMenu EQU $1C ; TaskMaster codes - "selection" of inactive menu itemwClosedNDA EQU $001D ; TaskMaster codes - desk accessory closedwCalledSysEdit EQU $001E ; TaskMaster codes - inactive menu item selectedwInSysWindow EQU $8000 ; TaskMaster codes - hi bit set for system windowswDraw EQU $00 ; VarCode - Draw window frame command.wHit EQU $01 ; VarCode - Hit test command.wCalcRgns EQU $02 ; VarCode - Compute regions command.wNew EQU $03 ; VarCode - Initialization command.wDispose EQU $04 ; VarCode - Dispose command.fHilited EQU $0001 ; WFrame - Window is highlighted.fZoomed EQU $0002 ; WFrame - Window is zoomed.fAllocated EQU $0004 ; WFrame - Window record was allocated.fCtlTie EQU $0008 ; WFrame - Window state tied to controls.fInfo EQU $0010 ; WFrame - Window has an information bar.fVis EQU $0020 ; WFrame - Window is visible.fQContent EQU $0040fMove EQU $0080 ; WFrame - Window is movable.fZoom EQU $0100 ; WFrame - Window is zoomable.fFlex EQU $0200fGrow EQU $0400 ; WFrame - Window has grow box.fBScroll EQU $0800 ; WFrame - Window has horizontal scroll bar.fRScroll EQU $1000 ; WFrame - Window has vertical scroll bar.fAlert EQU $2000fClose EQU $4000 ; WFrame - Window has a close box.fTitle EQU $8000 ; WFrame - Window has a title bar.windSize EQU $145 ; WindRec - Size of WindRec.wmTaskRecSize EQU $0046 ; WmTaskRec - Size of WmTaskRec.wTrackZoom EQU $001FwHitFrame EQU $0020wInControl EQU $0021; offset constants for WindColoroframeColor EQU 0otitleColor EQU 2otBarColor EQU 4ogrowColor EQU 6oinfoColor EQU 8; offset constants for WindRecoport EQU 0owDefProc EQU 170owrRefCon EQU 174owContDraw EQU 178owReserved EQU 182owStrucRgn EQU 186owContRgn EQU 190owUpdateRgn EQU 194owControls EQU 198owFrameCtrls EQU 202owFrame EQU 206; offset constants for WindowChainowNext EQU 0otheWindow EQU 4; offset constants for ParamListoparamLength EQU 0owFrameBits EQU 2owTitle EQU 4owRefCon EQU 8owZoom EQU 12owColor EQU 20owYOrigin EQU 24owXOrigin EQU 26owDataH EQU 28owDataW EQU 30owMaxH EQU 32owMaxW EQU 34owScrollVer EQU 36owScrollHor EQU 38owPageVer EQU 40owPageHor EQU 42owInfoRefCon EQU 44owInfoHeight EQU 48owFrameDefProc EQU 50owInfoDefProc EQU 54owContDefProc EQU 58owPosition EQU 62owPlane EQU 70owStorage EQU 74; offset constants for DeskMessageRecordodmreserved EQU 0odmmessageType EQU 4odmdrawType EQU 6